namespace = harm

##################################################
# #Responsive Incapability Events
# 0001 - 0010	Ailing with Age - You're growing old and your health is ailing.
# 0011 - 0020	Broken by Battle - You take brain damage during a battle.
##################################################










##################################################
# RESPONSIVE INCAPABILITY EVENTS

##################################################
# Ailing with Age
# by Ewan Cowhig Croft
# 0001 - 0010
##################################################

scripted_trigger harm_0001_general_requirements_trigger = {
	# Standard checks.
	is_available_adult = yes
	#harm_game_rule_enablement_trigger = yes
	# Mustn't _already_ have a trait granting you this.
	is_incapable = no
	# Health checks.
	AND = {
		cannot_be_killed = no
		is_elf = no
		OR = {
			# If you're already having problems...
			has_trait = infirm
			# Otherwise, we check health crossed against age.
			AND = {
				health >= excellent_health
				OR = {
					AND = {
						has_trait = blood_of_numenor_4
						age >= 280
					}
					AND = {
						has_trait = blood_of_numenor_3
						age >= 210
					}
					AND = {
						has_trait = blood_of_numenor_2
						age >= 150
					}
					AND = {
						has_trait = skinchanger
						age >= 120
					}
					AND = {
						has_trait = blood_of_numenor_1
						age >= 110
					}
					AND = {
						NOR = {
							has_trait = blood_of_numenor_1
							has_trait = blood_of_numenor_2
							has_trait = blood_of_numenor_3
							has_trait = blood_of_numenor_4
							has_trait = skinchanger
						}
						age >= 90
					}
				}
			}
			AND = {
				health >= good_health
				OR = {
					AND = {
						has_trait = blood_of_numenor_4
						age >= 270
					}
					AND = {
						has_trait = blood_of_numenor_3
						age >= 200
					}
					AND = {
						has_trait = blood_of_numenor_2
						age >= 140
					}
					AND = {
						has_trait = skinchanger
						age >= 110
					}
					AND = {
						has_trait = blood_of_numenor_1
						age >= 100
					}
					AND = {
						NOR = {
							has_trait = blood_of_numenor_1
							has_trait = blood_of_numenor_2
							has_trait = blood_of_numenor_3
							has_trait = blood_of_numenor_4
							has_trait = skinchanger
						}
						age >= 80
					}
				}
			}
			AND = {
				health >= medium_health
				OR = {
					AND = {
						has_trait = blood_of_numenor_4
						age >= 260
					}
					AND = {
						has_trait = blood_of_numenor_3
						age >= 190
					}
					AND = {
						has_trait = blood_of_numenor_2
						age >= 130
					}
					AND = {
						has_trait = skinchanger
						age >= 100
					}
					AND = {
						has_trait = blood_of_numenor_1
						age >= 90
					}
					AND = {
						NOR = {
							has_trait = blood_of_numenor_1
							has_trait = blood_of_numenor_2
							has_trait = blood_of_numenor_3
							has_trait = blood_of_numenor_4
							has_trait = skinchanger
						}
						age >= 70
					}
				}
			}
			AND = {
				health >= fine_health
				OR = {
					AND = {
						has_trait = blood_of_numenor_4
						age >= 250
					}
					AND = {
						has_trait = blood_of_numenor_3
						age >= 180
					}
					AND = {
						has_trait = blood_of_numenor_2
						age >= 120
					}
					AND = {
						has_trait = skinchanger
						age >= 90
					}
					AND = {
						has_trait = blood_of_numenor_1
						age >= 80
					}
					AND = {
						NOR = {
							has_trait = blood_of_numenor_1
							has_trait = blood_of_numenor_2
							has_trait = blood_of_numenor_3
							has_trait = blood_of_numenor_4
							has_trait = skinchanger
						}
						age >= 60
					}
				}
			}
			AND = {
				health >= poor_health
				OR = {
					AND = {
						has_trait = blood_of_numenor_4
						age >= 240
					}
					AND = {
						has_trait = blood_of_numenor_3
						age >= 170
					}
					AND = {
						has_trait = blood_of_numenor_2
						age >= 110
					}
					AND = {
						has_trait = skinchanger
						age >= 80
					}
					AND = {
						has_trait = blood_of_numenor_1
						age >= 70
					}
					AND = {
						NOR = {
							has_trait = blood_of_numenor_1
							has_trait = blood_of_numenor_2
							has_trait = blood_of_numenor_3
							has_trait = blood_of_numenor_4
							has_trait = skinchanger
						}
						age >= 50
					}
				}
			}
			# Below this we consider you to be dying. So uhhh. RIP.
		}
	}
}

scripted_effect harm_0001_age_gracefully_or_stress_loss_effect = {
	if = {
		limit = {
			NOT = { has_character_modifier = aging_gracefully_modifier }
		}
		add_character_modifier = aging_gracefully_modifier
	}
	else = { add_stress = medium_stress_loss }
}

#	You're growing old and your health is ailing.
harm.0001 = {
	type = character_event
	title = harm.0001.t
	desc = harm.0001.desc
	theme = physical_health
	left_portrait = {
		character = root
		animation = sick
		outfit_tags = { nightgown }
	}
	override_background = { reference = bedchamber }

	# See you next time...
	cooldown = { years = 10 }

	trigger = {
		# Must've had the foreshadowing events.
		has_character_flag = had_event_harm_0002
		has_character_flag = had_event_harm_0003
		# Then our general reqs.
		harm_0001_general_requirements_trigger = yes
	}

	weight_multiplier = {
		base = 0.75

		# Add the weightings.
		#modifier = { add = harm_game_rule_likelihood_value }
		# Weight up a bit for infirm characters.
		modifier = {
			add = 0.25
			has_trait = infirm
		}
	}

	immediate = { play_music_cue = "mx_cue_stress" }

	# I'll be around for donkey's years yet, I'm sure.
	option = {
		name = harm.0001.a

		duel = {
			skill = prowess
			value = very_high_skill_rating
			# Your body is healthy, your mind is clear.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					# Always give _some_ chance.
					min = -39
				}
				desc = harm.0001.a.tt.success
				send_interface_toast = {
					title = harm.0001.a.tt.success
					left_icon = root
					harm_0001_age_gracefully_or_stress_loss_effect = yes
				}
			}
			# You're not as fit as you thought you were.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					# Limit how low the off-chance can go.
					min = -19
				}
				desc = harm.0001.a.tt.failure
				send_interface_toast = {
					title = harm.0001.a.tt.failure
					left_icon = root
					add_trait = incapable
					create_character_memory = { type = became_incapable_due_to_age }
				}
			}
		}

		stress_impact = {
			brave = miniscule_stress_impact_loss
			craven = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_boldness = 1
				ai_energy = 1
			}
		}
	}
	
	# Perhaps I could live a little cleaner...
	option = {
		name = harm.0001.b

		duel = {
			skill = learning
			value = very_high_skill_rating
			# You make a few necessary changes.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					# Always give _some_ chance.
					min = -39
				}
				desc = harm.0001.b.tt.success
				send_interface_toast = {
					title = harm.0001.b.tt.success
					left_icon = root
					harm_0001_age_gracefully_or_stress_loss_effect = yes
				}
			}
			# Nothing stops the march of time.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					# Limit how low the off-chance can go.
					min = -19
				}
				desc = harm.0001.b.tt.failure
				send_interface_toast = {
					title = harm.0001.b.tt.failure
					left_icon = root
					add_trait = incapable
					create_character_memory = { type = became_incapable_due_to_age }
				}
			}
		}

		stress_impact = {
			patient = miniscule_stress_impact_loss
			impatient = minor_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_rationality = 1
				ai_zeal = 0.5
			}
		}
	}
	
	# Stubborn: I'll go when I'm good and ready, DeathDeityName, not before.
	option = {
		name = harm.0001.c
		trigger = { has_trait = stubborn }
		trait = stubborn

		# Stubborness & will alone keep you going.
		add_stress = major_stress_gain

		# We're just awarding stress directly here, so no stress impact.
		ai_chance = {
			# The AI should essentially always take this option.
			base = 1000
		}
	}

	# I'm not the youth I once was.
	option = {
		name = harm.0001.d

		# Welp, you've got some kinda chance.
		random_list = {
			20 = {
				desc = harm.0001.d.tt.success
				send_interface_toast = {
					title = harm.0001.d.tt.success
					left_icon = root
					harm_0001_age_gracefully_or_stress_loss_effect = yes
				}
			}
			80 = {
				desc = harm.0001.d.tt.failure
				send_interface_toast = {
					title = harm.0001.d.tt.failure
					left_icon = root
					add_trait = incapable
					create_character_memory = { type = became_incapable_due_to_age }
				}
			}
		}

		stress_impact = {
			lazy = miniscule_stress_impact_loss
			humble = miniscule_stress_impact_loss
			diligent = minor_stress_impact_gain
			arrogant = medium_stress_impact_gain
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_rationality = 0.25
				ai_energy = -0.5
				ai_boldness = -0.5
			}
		}
	}
}

#	Your mind fogs.
harm.0002 = {
	type = character_event
	title = harm.0002.t
	desc = harm.0002.desc
	theme = physical_health
	left_portrait = {
		character = root
		animation = paranoia
	}
	override_background = { reference = bedchamber }

	trigger = {
		NOT = { has_character_flag = had_event_harm_0002 }
		harm_0001_general_requirements_trigger = yes
	}

	weight_multiplier = {
		base = 0.75

		# Add the weightings.
		#modifier = { add = harm_game_rule_likelihood_value }
		# Weight up a bit for infirm characters.
		modifier = {
			add = 0.25
			has_trait = infirm
		}
	}

	immediate = {
		# Flag this event as taken for .0001.
		add_character_flag = had_event_harm_0002
	}

	# What was I thinking about?
	option = {
		name = harm.0002.a
		flavor = harm.0002.a.tt

		# No effects, this event is just foreshadowing.

		stress_impact = {
			base = medium_stress_impact_gain
			calm = minor_stress_impact_loss
		}
		ai_chance = {
			# Only one option, so what we do is unimportant.
			base = 10
		}
	}
}

#	Your bones creak.
harm.0003 = {
	type = character_event
	title = harm.0003.t
	desc = {
		desc = harm.0003.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = { has_trait = blind }
				desc = harm.0003.desc.blind
			}
			desc = harm.0003.desc.sighted
		}
		desc = harm.0003.desc.outro
	}
	theme = physical_health
	left_portrait = {
		character = root
		animation = worry
	}
	override_background = { reference = bedchamber }

	trigger = {
		NOT = { has_character_flag = had_event_harm_0003 }
		harm_0001_general_requirements_trigger = yes
	}

	weight_multiplier = {
		base = 0.75

		# Add the weightings.
		#modifier = { add = harm_game_rule_likelihood_value }
		# Weight up a bit for infirm characters.
		modifier = {
			add = 0.25
			has_trait = infirm
		}
	}

	immediate = {
		# Flag this event as taken for .0001.
		add_character_flag = had_event_harm_0003
	}

	# Gah, do everyone's joints #EMP creak#! like this?
	option = {
		name = harm.0003.a
		flavor = harm.0003.a.tt

		# No effects, this is just foreshadowing.

		stress_impact = {
			base = medium_stress_impact_gain
			stubborn = minor_stress_impact_loss
		}
		ai_chance = {
			# Only one option, so what we do is unimportant.
			base = 10
		}
	}
}


##################################################
# Broken by Battle
# by Ewan Cowhig Croft
# 0011 - 0020
##################################################

scripted_trigger harm_0011_valid_emergency_medic_trigger = {
	OR = {
		# Court physician is with the army.
		has_court_position = court_physician_court_position
		# Any knight with the physician trait is with the army.
		has_trait = lifestyle_physician
		# Any character with obscenely high learning will also do.
		learning >= 26
	}
	has_any_bad_relationship_with_character_trigger = { CHARACTER = root.side_commander }
}

#	You take brain damage during a battle.
harm.0011 = {
	type = character_event
	title = harm.0011.t
	desc = {
		desc = harm.0011.desc.default_body
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:medic }
				desc = harm.0011.desc.medic_present
			}
			desc = harm.0011.desc.no_medic
		}
	}
	theme = physical_health
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:medic
		animation = shock
	}
	override_background = { reference = battlefield }

	# Trigger taken care of in harm.0012.

	# Weight_multiplier taken care of in harm.0012, too.

	# Harm.0012 is where it's all happening, basically.

	immediate = { play_music_cue = "mx_cue_stress" }

	# I'm fine! I-I'm fine...
	option = {
		name = harm.0011.a

		random_list = {
			20 = {
				desc = harm.0011.a.tt.success
				# You recover, given time.
				send_interface_toast = {
					title = harm.0011.a.tt.success
					left_icon = root
					# Natural proclivity saves you.
					random_list = {
						50 = {
							desc = harm.0011.a.tt.success.bone
							add_character_modifier = {
								modifier = thick_skulled_modifier
								years = 20
							}
						}
						50 = {
							desc = harm.0011.a.tt.success.brain
							add_character_modifier = {
								modifier = strong_willed_modifier
								years = 20
							}
						}
					}
				}
			}
			80 = {
				desc = harm.0011.a.tt.failure
				# But you were not fine.
				send_interface_toast = {
					title = harm.0011.a.tt.failure
					left_icon = root
					add_trait = incapable
					create_character_memory = { type = became_incapable_due_to_battle_concussion }
					# We have to do this weird double-scoping due to some kind of dark pact with Code, else things won't work.
					scope:new_memory = { save_scope_as = battle_memory }
					scope:battle_memory = {
						set_variable = {
							name = battle_location
							value = scope:battle_location
						}
					}
				}
			}
		}

		stress_impact = { base = major_stress_impact_gain}
		ai_chance = {
			# AI should only pick this option if there's not a chance to call for a medic.
			base = 1
		}
	}
	
	# Scope:medic. Please. My #EMP head.#!
	option = {
		name = harm.0011.b
		trigger = { exists = scope:medic }

		# Scope:medic battles to save your thinker.
		scope:medic = {
			duel = {
				skill = learning
				value = very_high_skill_rating
				# With HerHis aid, you pull through.
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					desc = harm.0011.b.tt.success
					root = {
						send_interface_toast = {
							title = harm.0011.b.tt.success
							left_icon = root
							right_icon = scope:medic
							# Clearly you were well-fortified.
							random_list = {
								50 = {
									desc = harm.0011.a.tt.success.bone
									add_character_modifier = {
										modifier = thick_skulled_modifier
										years = 20
									}
								}
								50 = {
									desc = harm.0011.a.tt.success.brain
									add_character_modifier = {
										modifier = strong_willed_modifier
										years = 20
									}
								}
							}
							# Good start to a friendship.
							progress_towards_friend_effect = {
								REASON = friend_emergency_surgery
								CHARACTER = scope:medic
								OPINION = 0
							}
						}
					}
				}
				# HerHis best just wasn't good enough.
				50 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					# Without recent or prolonged experience on behalf of your physic, your odds are much worse.
					modifier = {
						add = 25
						NOR = {
							has_trait = lifestyle_physician
							has_court_position = court_physician_court_position
						}
					}
					desc = harm.0011.b.tt.failure
					root = {
						send_interface_toast = {
							title = harm.0011.b.tt.failure
							left_icon = root
							right_icon = scope:medic
							add_trait = incapable
							create_character_memory = { type = became_incapable_due_to_battle_concussion }
							# We have to do this weird double-scoping due to some kind of dark pact with Code, else things won't work.
							scope:new_memory = { save_scope_as = battle_memory }
							scope:battle_memory = {
								set_variable = {
									name = battle_location
									value = scope:battle_location
								}
							}
							# And uhhh, you're not happy.
							add_opinion = {
								target = scope:medic
								modifier = botched_my_treatment_crime_opinion
							}
						}
					}
				}
			}
		}

		stress_impact = {
			base = major_stress_impact_gain
			trusting = minor_stress_impact_loss
			stubborn = minor_stress_impact_gain
			paranoid = medium_stress_impact_gain
		}
		ai_chance = {
			# AI should be picking this if it's available.
			base = 1000
		}
	}
}

scripted_trigger harm_0012_valid_commander_trigger = {
	# Standard checks.
	#harm_game_rule_enablement_trigger = yes
	# Mustn't _already_ have a trait granting you this.
	is_incapable = no
}

#	Setup event for harm.0011.
#		Due to mechanical constraints, currently only fires for the leaders on either side.
harm.0012 = {
	hidden = yes
	scope = combat_side

	trigger = {
		always = no
		exists = side_commander
		side_commander = { harm_0012_valid_commander_trigger = yes }
	}

	weight_multiplier = {
		base = 1
		
		# Add the weightings.
		## We have to be a bit weird checking this one: there's not an easy way to weight the chance of the event by any commander potentially fulfilling the event, so we weight by a random valid one.
		#modifier = {
			#add = side_commander.harm_game_rule_likelihood_value
			#exists = side_commander
		#}
		# We deliberately weight only a _little_ bit for prowess - you've got a retinue and we still want bad luck to strike, so a mild rebate is all you get.
		modifier = {
			add = -0.25
			exists = side_commander
			side_commander = {
				OR = {
					prowess >= extremely_high_skill_rating
					has_trait = lifestyle_blademaster
				}
			}
		}
	}

	immediate = {
		# Grab our location.
		combat.location = { save_scope_as = battle_location }
		# Try to grab a physician, if there's one available.
		if = {
			limit = {
				any_side_knight = { harm_0011_valid_emergency_medic_trigger = yes }
			}
			# Pick out the appropriate knights.
			every_side_knight = {
				limit = { harm_0011_valid_emergency_medic_trigger = yes }
				add_to_list = potential_medics_list
			}
			# Then grab someone at random - medics are likely to be busy, so we don't just grab the best one.
			random_in_list = {
				list = potential_medics_list
				weight = {
					base = 0
					# You're important, so there's more likelihood of better medics being rushed to you.
					modifier = { add = learning }
					# But we weight down if they're not part of your army.
					modifier = {
						factor = 0.5
						NOT = { knight_army = root.side_commander.commanding_army }
					}
				}
				save_scope_as = medic
			}
		}
		# Then we fire the next event.
		side_commander = { trigger_event = harm.0011 }
	}
}
