namespace = wastelands

# Preventing raiding wastelands by creating a truce (taken from Vanilla)
# Called from army_on_actions.txt (on_raid_action_start)
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
wastelands.0001 = {
	hidden = yes
	type = empty
	scope = army

	trigger = {
		AND = {
			exists = scope:barony
		
			OR = {
			
				scope:barony.holder = {			
					has_culture = culture:wastelands
				}
				scope:barony.title_province = {			
					culture = culture:wastelands
				}
				scope:barony.county = {			
					culture = culture:wastelands
				}
			}		
		}
	}
	ai_chance = {
		base = 100
	}
	immediate = {

		send_interface_toast = {	
					title = wastelands.0001.t
					left_icon = scope:raider
					custom_tooltip = wastelands.0001.desc			
				}

		scope:raider = {
				add_truce_both_ways = {
					character = scope:county.holder.top_liege
					years = 10
					name = TRUCE_TRADE_DEAL
				}

				# Add some mutual opinion gain.
				reverse_add_opinion = {
					target = scope:county.holder.top_liege
					modifier = pleased_opinion
					opinion = 100
				}
		}		
	}	
}

# Preventing war
# attacker: attacking nation
# defender: defending nation
wastelands.0002 = {
	hidden = yes
	type = empty
	scope = army

	trigger = {		
		exists = scope:barony
		OR = {
			scope:barony.holder = {			
				has_culture = culture:wastelands
			}
			scope:barony.title_province = {			
				culture = culture:wastelands
			}
			scope:barony.county = {			
				culture = culture:wastelands
			}
		}		
	}
	ai_chance = {
		base = 100
	}
	immediate = {

		send_interface_toast = {	
			title = wastelands.0002.t
			left_icon = scope:attacker
			desc = wastelands.0002.desc					
		}

		scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					years = 10
					name = TRUCE_TRADE_DEAL
				}

				# Add some mutual opinion gain.
				reverse_add_opinion = {
					target = scope:county.holder.top_liege
					modifier = pleased_opinion
					opinion = 100
				}
		}		
	}	
}

# Preventing prison
# Code on-action: character being imprisoned in root scope
# imprisoning character set as scope:imprisoner
wastelands.0003 = {
	hidden = yes
	type = empty
	scope = character

	trigger = {
		OR = {
			has_culture = culture:wastelands
			scope:imprisoner = {			
				has_culture = culture:wastelands		
			}		
		}		
	}
	ai_chance = {
		base = 100
	}
	immediate = {		
		release_from_prison = yes	
	}	
}

# Called from courtier management after guest arrived
# root, scope:guest: the guest
# host: their host (owner of the court)
# characters: list of all characters moving together. Includes the root character.
 wastelands.0005 = {
	hidden = yes
	
	# None of these work in all cases, nor any combination :(
	#trigger = {	
	#	OR = {
	#		scope:host = {
	#			OR = {
	#				has_culture = culture:wastelands
	#				has_government = no_government
	#			}			
	#		}
	#		scope:guest = {
	#			OR = {
	#				has_culture = culture:wastelands
	#				has_government = no_government
	#			}			
	#		}
	#		scope:host.location = {
	#			culture = culture:wastelands
	#		}
	#		scope:guest.location = {
	#			culture = culture:wastelands
	#		}
	#	}		
	#}
	
	ai_chance = {
		base = 100
	}
	immediate = {

		# This is not working, don't know why. I will need to empty the whole wildnerness :(
		#scope:guest = {			
		#	death = {
		#		death_reason = death_vanished
		#	}
		#}
		#every_in_list = {
		#	list = characters
		#	death = {
		#		death_reason = death_vanished
		#	}
		#}	
		empty_wastelands_inhabitants_effect = yes
		empty_foreign_visitors_to_wastelands_effect = yes		
		remove_traits_wastelands_effect = yes
	}
}