namespace = wastelands

# Preventing raiding wastelands by creating a truce (taken from Vanilla)
# Called from army_on_actions.txt (on_raid_action_start)
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
wastelands.0001 = {
	hidden = yes
	type = empty
	scope = army

	trigger = {
		AND = {
			exists = scope:barony
		
			OR = {
			
				scope:barony.holder = {			
					has_culture = culture:wastelands
				}
				scope:barony.title_province = {			
					culture = culture:wastelands
				}
				scope:barony.county = {			
					culture = culture:wastelands
				}
			}		
		}
	}
	immediate = {
		debug_log = "Wastelands.0001: Preventing raiding..."
		scope:raider = {
		

				send_interface_toast = {	
					title = wastelands.0001.t
					left_icon = scope:raider
					custom_tooltip = wastelands.0001.desc			
				}

				add_truce_both_ways = {
					character = scope:county.holder.top_liege
					years = 10
					name = TRUCE_TRADE_DEAL
				}

				# Add some mutual opinion gain.
				reverse_add_opinion = {
					target = scope:county.holder.top_liege
					modifier = pleased_opinion
					opinion = 100
				}
		}		
	}	
}

# Preventing war
# attacker: attacking nation
# defender: defending nation
wastelands.0002 = {
	hidden = yes
	type = empty
	scope = army

	trigger = {		
		exists = scope:barony
		OR = {
			scope:barony.holder = {			
				has_culture = culture:wastelands
			}
			scope:barony.title_province = {			
				culture = culture:wastelands
			}
			scope:barony.county = {			
				culture = culture:wastelands
			}
		}		
	}
	immediate = {
		debug_log = "Wastelands.0002: Preventing war..."
		scope:attacker = {
		

				send_interface_toast = {	
					title = wastelands.0002.t
					left_icon = scope:attacker
					desc = wastelands.0002.desc					
				}
				add_truce_both_ways = {
					character = scope:defender
					years = 10
					name = TRUCE_TRADE_DEAL
				}

				# Add some mutual opinion gain.
				reverse_add_opinion = {
					target = scope:county.holder.top_liege
					modifier = pleased_opinion
					opinion = 100
				}
		}		
	}	
}

# Preventing prison
# Code on-action: character being imprisoned in root scope
# imprisoning character set as scope:imprisoner
wastelands.0003 = {
	hidden = yes
	type = empty
	scope = character

	trigger = {
		OR = {
			has_culture = culture:wastelands
			scope:imprisoner = {			
				has_culture = culture:wastelands		
			}		
		}		
	}
	immediate = {		
		debug_log = "Wastelands.0003: Preventing prison..."
		release_from_prison = yes	
	}	
}

# Called from courtier management after guest arrived
# root, scope:guest: the guest
# host: their host (owner of the court)
# characters: list of all characters moving together. Includes the root character.
 wastelands.0005 = {
	
	hidden = yes
	type = empty
	scope = character	
	immediate = {
		# debug_log = "Wastelands.0005: A guest arrived from pool. Removing them."
		empty_wastelands_inhabitants_effect = yes
		empty_foreign_visitors_to_wastelands_effect = yes		
		remove_traits_wastelands_effect = yes
	}
}

## Called from yearly events to check if AI should colonise
## For human player version check scripted_guis/lotr_wastelands.txt -> gui_colonise
 wastelands.0006 = {	
	hidden = yes
	type = empty
	scope = character	

	trigger = {
		is_ai = yes
		is_independent_ruler = yes
		
		# As a Wastelands I don't expand
		NOT = {
			has_culture = culture:wastelands
		}
		
		gold >= 500
		# prestige >= 100
		
		NOT = {
			has_character_flag = colonisation_cooldown_flag
		}

		# Only surrounding lands
		any_sub_realm_county = {
			any_neighboring_county = {
				culture = culture:wastelands
			}
		}
	}
	immediate = {
		debug_log = "Wastelands.0006: AI considering colonization..."
		# Only surrounding lands
		every_sub_realm_county = {
			limit = {
				NOT = {
					culture = culture:wastelands
				}
			}
			every_neighboring_county = {
				limit = {
					culture = culture:wastelands
					NOT = {
						holder = root
					}
				}
				add_to_list = adjacent_wastelands
			}
		}
		random_in_list = {
			list = adjacent_wastelands
			save_scope_as = wastelands
			
			scope:wastelands = {
				debug_log_scopes = yes
			}
		}
		if = {
			limit = { exists = scope:wastelands }
			ai_colonisation_effect = { WASTELANDS = scope:wastelands }
		}		
	}
}