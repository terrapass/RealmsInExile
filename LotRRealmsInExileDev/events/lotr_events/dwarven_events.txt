namespace = dwarven

### Dwarven Events ###
#			dwarven.0100		Erebor Starting Event
#			dwarven.0200		Balin Starting Event
#			dwarven.0300		Nordinbad Starting Event

#			dwarven.5000-5099	Dwarven Reincarnation Events

#			dwarven.9000-9002	Dwarven Shaving Events
#			dwarven.9000		I shave someone
#			dwarven.9001		I am shaved
#			dwarven.9002		Bearded again !



###################################
### Dwarven Introduction Events ###
###################################

dwarven.0100 = { # Introduction to Dain
	content_source = realms
	type = character_event
	title = dwarven.0100.t
	desc = dwarven.0100.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	right_portrait = {
		character = root
		animation = personality_honorable
	}
	
	option = { 
		name = dwarven.0100.a
	}
}

dwarven.0200 = { # Introduction to Balin
	content_source = realms
	type = character_event
	title = dwarven.0200.t
	desc = dwarven.0200.desc
	theme = martial_strategy_focus
	override_background = {
		reference = wilderness_underground
	}
	
	right_portrait = {
		character = root
		animation = celebrate_axe
	}
	
	option = { 
		name = dwarven.0200.a
	}
}

dwarven.0300 = { # Introduction to Gorin of Nordinbad
	content_source = realms
	type = character_event
	title = dwarven.0300.t
	desc = dwarven.0300.desc
	theme = learning_scholarship_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	right_portrait = {
		character = root
		animation = personality_content
	}
	
	option = { 
		name = dwarven.0300.a
	}
}

##############################################
# dwarven.1000 Introduction to Dwarves event #
##############################################

dwarven.1000 = { #Introduction to Dwarven characters
	title = dwarven.1000.t
	desc = dwarven.1000.desc
	theme = realm
		
	left_portrait = {
		character = root
		animation = thinking
	}
	
	trigger = { is_dwarf = yes }
	
	option = { # All right, I get it
		name = dwarven.1000.a
	}
}


####################################################
###  Dwarven Fathers Reincarnation System by Juke ##
####################################################

dwarven.5000 = { # Game Start Reincarnation System Setup Event
	hidden = yes
	scope = none
	
	immediate = {
		### Save the clans to a list and set up scopes
		dynasty:dynasty_durin	= { # Durin - Longbeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofdurin1 }
		}
		dynasty:dynasty_uri		= { # Uri - Firebeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofuri0 }
		}
		dynasty:dynasty_dwalin	= { # Dwalin - Broadbeams
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofdwalin0 }
		}
		dynasty:dynasty_thrar	= { # Thrar - Blacklocks
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofthrar0 }
		}
		dynasty:dynasty_sindri	= { # Sindri - Ironfists
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofsindri0 }
		}
		dynasty:dynasty_thulin	= { # Thulin - Stiffbeards
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofthulin0 }
		}
		dynasty:dynasty_bavor	= { # Bavor - Stonefoots
			add_to_list = dorfdad_dynasties
			set_variable = { name = dorfdad value = character:lineofbavor0 }
		}
		
		### Set up Dynasty Variables
		every_in_list = {
			list = dorfdad_dynasties
			if = { # Generation 4
				limit = { current_year >= 3900 }
				set_variable = {
					name = dorfdad_incarnations
					value = 4
				}
			}
			if = { # Generation 5
				limit = { current_year >= 4900 }
				change_variable = {
					name = dorfdad_incarnations
					add = 1
				}
			}
			if = { # Generation 6
				limit = { current_year >= 5900 }
				change_variable = {
					name = dorfdad_incarnations
					add = 1
				}
			}
		}
		
		debug_log = "Dorfdad Reincarnation System set up!"
	}
}

dwarven.5001 = { # On childbirth: Random chance to be a reincarnation
	type = character_event
	hidden = yes

	trigger = {
		# Basic Stuff
		NOT = { exists = scope:real_father }
		is_female = no
		is_lowborn = no
		is_dwarf = yes
		NOR = {
			has_trait = sickly
			root.father ?= { 
				house = root.house
				has_trait = disinherited
			}
		}
		# Must be in royal dynasty
		dynasty = {
			is_in_list = dorfdad_dynasties
			exists = var:dorfdad_incarnations
			var:dorfdad_incarnations < 7
		}
		# Must have reincarnations left
#		# Parent, grandparent or great grandparent must be my dynasty head
#		any_ancestor = {
#			house = root.house
#			this = root.dynasty.dynast
#		}
#		# Parent, grandparent or great grandparent must be a king or higher
#		any_ancestor = {
#			is_alive = yes
#			house = root.house
#			is_landed = yes
#			highest_held_title_tier >= tier_kingdom
#		}
#		# Should be oldest male child
#		NOR = {
#			any_sibling = {
#				is_female = no
#				NOT = { has_trait = bastard }
#				age > root.age
#			}
#		}
#		# Must be heir to a kingdom, or parent must be heir to a kingdom
#		OR = {
#			any_ancestor = {
#				is_alive = yes
#				is_landed = yes
#				house = root.house
#				highest_held_title_tier >= tier_kingdom
#				player_heir = ROOT
#			}
#			any_parent = {
#				is_alive = yes
#				house = root.house
#				any_ancestor = {
#					is_alive = yes
#					is_landed = yes
#					house = root.house
#					highest_held_title_tier >= tier_kingdom
#					player_heir = this
#				}
#			}
#		}
		# Last Incarnation cant be alive or close family member
		NOT = {
			dynasty = {
				any_dynasty_member = {
					is_alive = yes
					has_trait = dwarf_father
				}
			}
		}
		#dynasty.var:dorfdad_latest ?= {
		#	even_if_dead = yes
		#	is_alive = no
		#	NOT = { is_close_family_of = root }
		#}
		# No other unconfirmed reincarnations exist
		NOT = { dynasty.var:current_reincarnation ?= { is_alive = yes } }
	}
	
	immediate = {
		debug_log = "Testing for dorfdad reincarnation!"
		random = {
			chance = 10000
			modifier = {
				any_parent = {
					is_ai = no
				}
				factor = 100
			}
			create_possible_dorfdad_effect = yes
			debug_log = "Found a possible Dorfdad Reincarnation!"
		}
	}
}

dwarven.5100 = { # Upon turning 16: Reincarnate realized who they are, is confirmed and renamed
	content_source = realms
	type = character_event
	title = dwarven.5100.t
	desc = dwarven.5100.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	right_portrait = {
		character ?= scope:my_dorfdad
	}
	
	trigger = {
		has_character_flag = is_a_dorfdad
		dynasty = { var:current_reincarnation ?= root }
		## He or his family must hold a kingdom
		OR = {
			is_landed = yes
			highest_held_title_tier >= tier_kingdom
			any_ancestor = {
				is_alive = yes
				is_landed = yes
				house = root.house
				highest_held_title_tier >= tier_kingdom
				player_heir ?= ROOT
			}
			any_parent = {
				is_alive = yes
				house = root.house
				any_ancestor = {
					is_alive = yes
					is_landed = yes
					house = root.house
					highest_held_title_tier >= tier_kingdom
					player_heir ?= this
				}
			}
		}
	}
	
	immediate = {
		become_dorfdad_effect = yes
		dynasty = {
			every_dynasty_member = {
				limit = {
					is_ai = no
					NOT = { this = root }
				}
				trigger_event = dwarven.5101 # Close family news
			}
		}
		debug_log = "Confirmed a new Dorfdad Reincarnation!"
	}
	option = {
		name = dwarven.5100.a
	}
}

dwarven.5101 = { # News reach close family
	content_source = realms
	type = character_event
	title = dwarven.5101.t
	desc = dwarven.5101.desc
	theme = stewardship_duty_focus
	override_background = {
		reference = throne_room_dwarf
	}
	
	trigger = {
		is_dwarf = yes
	}
	
	left_portrait = {
		character = root
		animation = shock
	}
	
	lower_center_portrait = {
		character ?= scope:my_dorfdad
	}
	
	right_portrait = {
		character = scope:new_dorfdad
		animation = personality_honorable
	}
	
	
	option = {
		#name = {
		#	first_valid = {
		#		triggered_desc = {
		#			trigger = { scope:new_dorfdad = { is_close_or_extended_family_of = root } }
					name = dwarven.5101.a
		#		}
		#		text = dwarven.5101.b
		#	}
		#}
		show_as_tooltip = {
			scope:new_dorfdad ?= { become_dorfdad_effect = yes }
		}
	}
}

##############################
### Dwarven Shaving Events ###
##############################

#I shave someone
dwarven.9000 = { #by Brice Underhill
	content_source = realms
	type = character_event
	title = dwarven.9000.t
	desc = {
		desc = prison.1020.start.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						ai_compassion < 0
						has_relation_rival = scope:recipient
					}
				}
				desc = dwarven.9000.cruel.desc
			}
			desc = prison.1020.compassionate.desc
		}
	}
	theme = prison
	left_portrait = {
		character = scope:actor
		animation = schadenfreude
	}
	right_portrait = {
		character = scope:recipient
		animation = fear
	}

	trigger = { scope:recipient = { is_imprisoned_by = scope:actor } }

	on_trigger_fail = {
		scope:recipient = {
			if = {
				limit = { has_character_flag = is_being_tortured }
				remove_character_flag = is_being_tortured
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_prison"
		hidden_effect = {
			#For the text
			save_court_physician_as_effect = { SCOPE_NAME = physician }
			if = {
				limit = { NOT = { exists = scope:physician } }
				random_dummy_gender_physician_effect = yes
				scope:dummy_physician_gender = { save_scope_as = physician }
			}
		}
	}

	option = {
		name = {
			trigger = {
				OR = {
					has_trait = sadistic
					has_relation_rival = scope:recipient
				}
			}
			text = prison.1020.a
		}
		name = {
			trigger = {
				NAND = {
					OR = {
						has_trait = sadistic
						has_relation_rival = scope:recipient
					}
					scope:recipient = { is_adult = yes }
				}
			}
			text = prison.1020.b
		}
		show_as_tooltip = { shave_recipient_effect = yes }
		scope:recipient = {
			trigger_event = dwarven.9001
		}
	}
}

#I am shaved
dwarven.9001 = { #by Brice Underhill
	content_source = realms
	type = character_event
	title = dwarven.9000.t
	desc = {
		desc = prison.1021.start.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = {
						OR = {
							ai_compassion < 0
							has_relation_rival = scope:recipient
						}
					}
				}
				desc = dwarven.9001.cruel.desc
			}
			desc = dwarven.9001.compassionate.desc
		}
	}
	theme = prison
	left_portrait = {
		character = root
		animation = fear

	}
	right_portrait = {
		character = scope:actor
		animation = schadenfreude
	}

	trigger = { scope:recipient = { is_imprisoned_by = scope:actor } }

	on_trigger_fail = {
		scope:recipient = {
			if = {
				limit = { has_character_flag = is_being_tortured }
				remove_character_flag = is_being_tortured
			}
		}
	}

	immediate = {
		play_music_cue = "mx_cue_prison"
	}

	option = {
		name = {
			trigger = { is_adult = yes }
			text = dwarven.9001.a
		}
		shave_recipient_effect = yes
	}

	after = {
		add_character_flag = house_feud_shaving_flag
		house_feud_torture_event_effect = yes
	}
}

dwarven.9002 = { # Bearded Again !
	content_source = realms
	type = character_event
	title = dwarven.9002.t
	desc = dwarven.9002.desc
	theme = crown
	right_portrait = {
		character = root
		animation = happiness
	}
	
	option = { #I can finally show my face again !
		name = dwarven.9002.a
		# custom_tooltip = dwarven.9002.att # There exists no loc key for this
		
		remove_trait = beardless
		add_stress = medium_stress_loss
	}
}