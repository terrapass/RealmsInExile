# Events for handling the Hunt activity

namespace = mining

## Hunt events
## by Linnéa Thimrén, Petter Vilberg, Bianca Savazzi, and Joe Parkin

############################
## Setup and maintenance events
## (0000-0999)
##  0000-0099 - Invalidation
##  0100-0199 - Invitation
##  0200-0299 - Start events
############################

############################
## Random event chains
## 1000-4999
############################


############################
## Random pulse
## 5000-5999
############################


############################
## Complication events
## 6000-6999
############################


############################
## Choose your artifact events 
## 7001 - 7999	 
############################


############################
## Outcome events 
## 8001 - 8999	 
############################

		
############################
## End events
## 9000-9999
############################


#Things to use in hunt-events:
	# hunt_activity_standard_game_effect - find a game animal
	# hunt_activity_dangerous_game_effect - find a dangerous animal
	# hunt_activity_falconry_game_effect - find a falcon prey
	# hunt_activity_random_subordinate_participant_effect - save a subordinate on the hunt
	# hunt_activity_random_interest_participant_effect - save a notable guest
	# hunt_animal_melee_kill_effect - fight animal alone
	# hunt_animal_melee_kill_group_effect - fight animal with all hunters
	# hunt_animal_bow_kill_effect - try to shoot animal


#####################################
#	SETUP AND MAINTENANCE EVENTS    #
#	0000 - 0999						#
#####################################

# Select an Overseer of the Mines #
mining.0100 = {
	type = activity_event
	title = mining.0100.t
	desc = {
		desc = mining.0100.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_relation_rival = scope:ootm_candidate_1
						opinion = {
							value <= low_negative_opinion
							target = scope:ootm_candidate_1
						}
					}
				}
				desc = mining.0100.desc.hates_candidate_a
			}
			desc = mining.0100.desc.candidate_a
		}
		triggered_desc = {
			trigger = { exists = scope:ootm_candidate_2 }
			desc = mining.0100.desc.nepotism
		}
		triggered_desc = {
			trigger = { exists = scope:ootm_candidate_3 }
			desc = mining.0100.desc.enthusiasm
		}
		desc = mining.0100.desc.outro
	}
	theme = hunt_activity_camp
	left_portrait = {
		character = scope:host
		animation = thinking
	}
	center_portrait = {
		character = scope:ootm_candidate_2
		animation = war_over_win
	}
	right_portrait = {
		character = scope:ootm_candidate_1
		animation = admiration
	}
	lower_right_portrait = scope:ootm_candidate_3

	trigger = {
		NOT = { employs_court_position = overseer_of_the_mines_court_position } #This is a delayed event so it is possible you have picked out an Overseer after it was set to trigger
		exists = scope:activity #As it is delayed, the activity might have invalidated in the meanwhile
		scope:activity = {
			OR = {
				any_attending_character = {
					AND = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
					}
					AND = {
						any_pool_character = {
							province = scope:activity.activity_location
							is_physically_able_ai_adult = yes
							can_be_knight_trigger = { ARMY_OWNER = scope:host }
						}
					}
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			ordered_attending_character = { # The best guy for the job
				limit = {
					OR = {
						is_vassal_of = root
						is_courtier_of = root
					}
					root = {
						can_appoint_char_to_court_position = {
							CHAR = prev
							COURT_POS = overseer_of_the_mines_court_position
						}
					}
				}
				order_by = aptitude:overseer_of_the_mines_court_position
				save_scope_as = ootm_candidate_1
			}
			if = {
				limit = {
					NOT = { exists = scope:ootm_candidate_1 }
				}
				limit = {
					any_pool_character = {
						province = scope:activity.activity_location
						is_physically_able_ai_adult = yes
						can_be_knight_trigger = { ARMY_OWNER = scope:host }
					}
				}
				random_pool_character = {
					province = scope:activity.activity_location
					limit = {
						is_physically_able_ai_adult = yes
						can_be_knight_trigger = { ARMY_OWNER = scope:host }
					}
					save_scope_as = ootm_candidate_1
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
					}
				}
				random_attending_character = { # The nepotism pick
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						OR = {
							is_close_or_extended_family_of = root
							has_relation_friend = root
							has_relation_lover = root
						}
						NOT = { has_relation_rival = root }
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
					}
					save_scope_as = ootm_candidate_2
				}
			}
			if = {
				limit = {
					any_attending_character = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:ootm_candidate_2
							}
							NOT = { this = scope:ootm_candidate_2 }
						}
					}
				}
				ordered_attending_character = { # Second best guy for the job
					limit = {
						OR = {
							is_vassal_of = root
							is_courtier_of = root
						}
						root = {
							can_appoint_char_to_court_position = {
								CHAR = prev
								COURT_POS = overseer_of_the_mines_court_position
							}
						}
						NOT = { this = scope:ootm_candidate_1 }
						trigger_if = {
							limit = {
								exists = scope:ootm_candidate_2
							}
							NOT = { this = scope:ootm_candidate_2 }
						}
					}
					order_by = {
						value = aptitude:overseer_of_the_mines_court_position
						add = ai_energy
					}
					save_scope_as = ootm_candidate_3
				}
			}
		}
	}

	option = { # Pick the best guy
		name = mining.0100.a
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_1
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		add_prestige = minor_prestige_gain
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_1
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:ootm_candidate_1
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick the nepotism target
		name = mining.0100.b
		trigger = {
			exists = scope:ootm_candidate_2
		}
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_2
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		reverse_add_opinion = {
			target = scope:ootm_candidate_2
	 		modifier = grateful_opinion
	 		opinion = 15
		}
		ai_chance = {
			base = 10
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_2
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 2
				has_trait = family_first
			}
		}
	}

	option = { # Pick the third target
		name = mining.0100.c
		trigger = {
			exists = scope:ootm_candidate_3
		}
		court_position_grant_effect = {
			CANDIDATE = scope:ootm_candidate_3
			POS = overseer_of_the_mines_court_position
			EMPLOYER = root
		}
		random = {
			chance = 50
			set_relation_friend = {
				target = scope:ootm_candidate_3
		 		reason = friend_made_me_moh
			}
		}
		ai_chance = {
			base = 5
			opinion_modifier = {
				who = root
				opinion_target = scope:ootm_candidate_3
				min = 0
				max = 10
				multiplier = 0.5
			}
			modifier = {
				factor = 0.5
				has_trait = family_first
			}
			modifier = {
				factor = 0.5
				has_relation_rival = scope:ootm_candidate_3
				NOT = { has_trait = forgiving }
			}
		}
	}

	option = { # Pick nobody
		name = mining.0100.d
		ai_chance = { # The AI should always pick someone, unless they're bankrupt
			base = 0
			modifier = {
				add = 100
				gold < tiny_gold_value
			}
		}
	}

	after = {
		# Update success chance
		scope:activity = {
			set_variable = {
				name = mining_success_chance
				value = mining_success_chance_value
			}
		}
	}
}

#####################################
#	INVITATION EVENTS	            #
#	0100 - 0199						#
#####################################

#####################################
#	START EVENTS	                #
#	0200 - 0299						#
#####################################

# Prospecting Start
mining.0200 = {
	type = activity_event
	title = mining.0200.t
	desc = mining.0200.desc
	theme = hunt_activity_camp
	left_portrait = {
		character = scope:host
		animation = thinking
	}
	right_portrait = {
		character = scope:hunt_participant
		animation = admiration
	}

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:activity = {
			has_activity_option = { category = special_type option = mining_type_prospecting }
		}
	}

	immediate = {
		scope:activity = {
			set_variable = {
				name = mining_success_chance
				value = mining_success_chance_value
			}
		}
	}

	option = { # Pep Talk
		name = mining.0200.a
		duel = {
			skill = diplomacy
			value = 8
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:pep_talk_success
					}
				}
			}

			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:pep_talk_failure
					}
				}
			}
		}
	}

	option = { # Devise a Plan
		name = mining.0200.b
		duel = {
			skill = learning
			value = 10
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:strategy_success
					}
				}
			}

			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:strategy_failure
					}
				}
			}
		}
	}

	option = { # Threaten
		name = mining.0200.c
		random_list = {
			1 = {
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:threaten_success
					}
				}
			}
			9 = {
				scope:activity = {
					set_variable = {
						name = mining_team_huddle
						value = flag:threaten_failure
					}
				}
			}
		}
	}

	option = { # Leave them to it
		name = mining.0200.d
	}

	after = {
		if = {
			limit = { this = scope:host }
			scope:activity = {
				every_attending_character = {
					limit = {
						NOT = { this = scope:host }
					}
					trigger_event = mining.0200
				}
				set_variable = mining_started
				add_activity_log_entry = {
					key = hunt_quarry_selected_log
					score = 25
					tags = { quarry }
					character = scope:host
				}
				set_variable = {
					name = mining_success_chance
					value = mining_success_chance_value
				}
			}
		}
	}
}

#####################################
#	OUTCOME EVENTS	                #
#	8001 - 8999						#
#####################################

# Prospecting Success
mining.8001 = {
	type = activity_event
	title = mining.8001.t
	desc = {
		desc = hunt.1003.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					hunt_animal_type_predator_trigger = { VAR = scope:activity.var:animal_type }
				}
				desc = hunt.1003.dangerous
			}
			triggered_desc = {
				trigger = {
					NOT = { scope:activity.var:animal_type = flag:hare }
				}
				desc = hunt.1003.bay
			}
			desc = hunt.1003.dogs
		}
		first_valid = {
			triggered_desc = {
				trigger = {	
					OR = {
						scope:activity.var:animal_type = flag:bison
						scope:activity.var:animal_type = flag:aurochs
					}
				}
				desc = hunt.1003.bison
			}
			triggered_desc = {
				trigger = { scope:activity.var:animal_type = flag:boar }
				desc = hunt.1003.boar
			}
			triggered_desc = {
				trigger = {
					OR = {
						scope:activity.var:animal_type = flag:hart
						scope:activity.var:animal_type = flag:elk
					}
				}
				desc = hunt.1003.hart
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						OR = {
							var:animal_type = flag:antelope
							var:animal_type = flag:stag
							var:animal_type = flag:roe
							var:animal_type = flag:gazelle
							var:animal_type = flag:saiga
							var:animal_type = flag:reindeer
						}
					}
				}
				desc = hunt.1003.deer
			}
			triggered_desc = {
				trigger = { scope:activity.var:animal_type = flag:fox }
				desc = hunt.1003.fox
			}
			triggered_desc = {
				trigger = {
					OR = {
						scope:activity.var:animal_type = flag:tiger
						scope:activity.var:animal_type = flag:leopard
						scope:activity.var:animal_type = flag:lion
						scope:activity.var:animal_type = flag:bear
					}
				}
				desc = hunt.1003.claws
			}
			triggered_desc = {
				trigger = {
					OR = {
						scope:activity.var:animal_type = flag:hyena
						scope:activity.var:animal_type = flag:wolf
						scope:activity.var:animal_type = flag:lynx
						scope:activity.var:animal_type = flag:warg
						scope:activity.var:animal_type = flag:caragor
					}
				}
				desc = hunt.1003.fangs
			}
			triggered_desc = {
				trigger = { scope:activity.var:animal_type = flag:hare }
				desc = hunt.1003.hare
			}
		}
		triggered_desc = {
			trigger = {
				exists = scope:wounded_courtier
				scope:wounded_courtier = {
					NOT = { is_participant_in_activity = scope:activity }
				}
			}
			desc = hunt.1003.injured
		}
	}
	theme = mining_activity
	left_portrait = {
		character = scope:host
		animation = throne_room_two_handed_passive_1
	}
	right_portrait = {
		trigger = { exists = scope:mining_participant }
		character = scope:mining_participant
		animation = marshal
	}
	lower_right_portrait = {
		trigger = {
			exists = scope:intentee
			NOT = { scope:mining_participant ?= scope:intentee }
		}
		character = scope:intentee
	}
	cooldown = { weeks = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	# trigger = {		
	# 	hunt_story_trigger = { STORY = chase }
	# }

	weight_multiplier = {
		base = 1
		modifier = { add = involved_activity.var:mining_success_chance }
	}

	immediate = {
		scope:activity = {
			set_variable = {
				name = mining_success
				value = flag:yes
			}
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:host }
				}
				save_scope_as = mining_participant
			}
		}
		save_scope_as = mining_ending
		# hunt_outcome_scope_effect = yes
		mining_all_attendee_xp_effect = { CHANGE = 2 RANDOM = 1 } # Guest XP gain for success
		# if = {
		# 	limit = { hunt_murder_target_trigger = yes }
		# 	hidden_effect = { hunt_save_murder_target_effect = yes }
		# }
	}

	option = { #Take the shot
		name = {
			trigger = {
				NOT = {	scope:activity.var:animal_type = flag:hare }
			}
			text = mining.8001.a
		}
		name = {
			trigger = { scope:activity.var:animal_type = flag:hare }
			text = mining.8001.a.small
		}
		flavor = mining.8001.a.flavor
		# Duel
		hunt_animal_bow_kill_effect = { DEATH = no VAR = scope:activity.var:animal_type }
	}

}

# Prospecting Failure - All the Glisters
