namespace = wok_courtship_outcomes

# Extra events for courtship to justify having to romance people before being allowed to marry them.

## Outcome events: 
## Remember to check whether the characters are actually *able* to marry before marrying them!
## These should all notify the matchmaker, if the matchmaker exists!
# This probably is gonna work out.
# This probably isn't gonna work out.
# Head over heels: Let's get married right away!
# Throw a feast in celebration! 

# Special conditional outcomes: 
# Whoopsie! Already pregnant, better fast-track marriage!
# Radiant outcomes: Swear oaths to the Stormfather, special if you're his bondsmith vs vassal of bondsmith.
# Bureaucratic outcome: Formalize the marriage at a functionary.
# Thaylen must pay Dowry

scripted_effect wokc_marriage_effect = {
	end_court_scheme_effect = {OUTCOME = success_soulmate}
	marry = scope:target
}
scripted_effect dowry_reaction_effect = {
	reverse_add_opinion = {
		target = scope:target.liege_or_court_owner
		modifier = dowry_opinion
		opinion = 30
	}
	# scope:target = {
	# 	add_opinion = {
	# 		target = root
	# 		modifier = love_opinion
	# 		opinion = {
	# 			value = 30
	# 			add = root.attraction
	# 			if = {limit = {has_trait = generous} add = 5}
	# 			if = {limit = {has_trait = greedy} add = 5}
	# 			if = {limit = {has_trait = humble} add = 5}
	# 			if = {limit = {has_trait = cynical} subtract = 5}
	# 			if = {limit = {has_trait = arrogant} subtract = 5}
	# 		}
	# 	}
	# }
}
scripted_effect wokc_rejection_effect = {
	if = {
		limit = {
			scope:target = {
				has_trait = arrogant
			}
		}
		end_court_scheme_effect = {OUTCOME = failure_hard}
	}
	else = {
		end_court_scheme_effect = {OUTCOME = failure_soft}
	}
	# reverse_add_opinion = {
	# 	target = scope:target
	# 	modifier = disappointed_opinion
	# 	opinion = -25
	# }
}

# Dowry from me
wok_courtship_outcomes.1001 = {
	title = wok_courtship_outcomes.1001.t
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	trigger = {
		is_ai = no
		exists = scope:target.liege_or_court_owner
		NOT = {
			this = scope:target.liege_or_court_owner
		}
		scope:target = {
			is_ai = yes
			is_lowborn = no
			is_landed = no
		}
		can_marry_character_trigger = {
			CHARACTER = scope:target
		}
		scope:target.liege_or_court_owner.ai_greed > 10
		tier_difference = {
			target = scope:target.liege_or_court_owner
			value < 0
		}
	}
	weight_multiplier = { # Max 13
		base = 100
		modifier = {add = scope:target.liege_or_court_owner.opinion_of_root.*-1}
		modifier = {add = scope:target.liege_or_court_owner.ai_greed}
		modifier = {factor = 0.01}
		modifier = {
			add = scope:target.liege_or_court_owner.highest_held_title_tier
			scope:target = {is_claimant = yes}
		}
		modifier = {
			add = 1
			culture = culture:thaylen
		}
		modifier = {
			add = 1
			scope:target.culture = culture:thaylen
		}
		modifier = {
			add = 1
			scope:target.liege_or_court_owner.culture = culture:thaylen
		}
		modifier = {
			add = 1
			scope:target.liege_or_court_owner = {has_trait = greedy}
		}
		modifier = {
			factor = 0.1
			scope:target.liege_or_court_owner = {has_trait = generous}
		}
		modifier = {
			add = 1
			scope:target = {
				is_child_of = scope:target.liege_or_court_owner
			}
		}
	}
	immediate = {
		scope:target.liege_or_court_owner = {
			save_scope_as = liege
		}
		save_scope_value_as = {
			name = dowry
			value = {
				value = scope:target.liege_or_court_owner.highest_held_title_tier
				subtract = highest_held_title_tier
				multiply = scope:target.liege_or_court_owner.highest_held_title_tier.square
				multiply = 5
				add = 100
				add = scope:target.liege_or_court_owner.ai_greed
				if = {
					limit = {gold > 1000}
					add = massive_gold_value
				}
				if = {
					limit = {gold > 10000}
					add = monumental_gold_value
				}
				if = {
					limit = {NOT = {exists = scope:scheme_successful}}
					multiply = 10
				}
			}
		}
	}
	theme = romance_scheme
	left_portrait = scope:target
	right_portrait = {
		character = scope:target.liege_or_court_owner
		animation = personality_greedy
	}
	desc = {
		desc = wok_courtship_outcomes.1001.desc_intro
		first_valid = {
			triggered_desc = {
				trigger = {exists = scope:scheme_successful}
				desc = wok_courtship_outcomes.1001.desc_successful
			}
			desc = wok_courtship_outcomes.1001.desc_unsuccessful
		}
		desc = wok_courtship_outcomes.1001.desc
	}
	option = {
		name = wok_courtship_outcomes.1001.pay_gold
		if = {
			limit = {
				NOT = {exists = scope:scheme_successful}
			}
			add_internal_flag = dangerous
		}
		stress_impact = {
			greedy = 30
			generous = -20
			improvident = -15
			humble = -10
		}
		pay_short_term_gold = {
			target = scope:target.liege_or_court_owner
			gold = scope:dowry
		}
		wokc_marriage_effect = yes
		dowry_reaction_effect = yes
	}
	option = {
		name = wok_courtship_outcomes.1001.no
		stress_impact = {
			greedy = -10
			generous = 20
			improvident = 15
			humble = 10
		}
		wokc_rejection_effect = yes
	}
	option = {
		trigger = {
			has_any_artifact = yes
		}
		name = wok_courtship_outcomes.1001.artifact
		stress_impact = {
			greedy = 30
			generous = -20
			improvident = -15
			humble = -10
		}
		transfer_random_artifact = { # TODO: Replace with specifically shard-type artifacts for king and emperor tier marriages
			A = root
			B = scope:target.liege_or_court_owner
		}
		wokc_marriage_effect = yes
		dowry_reaction_effect = yes
	}
}
# wok_courtship_outcomes.2001 = {

# }