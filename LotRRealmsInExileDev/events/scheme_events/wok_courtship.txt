#namespace = wok_courtship
#
## Extra events for courtship to justify having to romance people before being allowed to marry them.
## Ongoing events:
## 1001: Amazing Stew
## 2001: What if you need to poop?
## Revealing secrets
## Sharing jam
#
### Outcome events: 
### These should all notify the matchmaker, if the matchmaker exists!
## This probably is gonna work out.
## This probably isn't gonna work out.
## Head over heels: Let's get married right away!
## Throw a feast in celebration! 
#
## Special conditional outcomes: 
## Whoopsie! Already pregnant, better fast-track marriage!
## Radiant outcomes: Swear oaths to the Stormfather, special if you're his bondsmith vs vassal of bondsmith.
## Bureaucratic outcome: Formalize the marriage at a functionary.
## Thaylen must pay Dowry
#
## The Fastest Way (Cooking)
#scripted_trigger wokc_1001_prefers_sweet = {
#	OR = {
#		trigger_if = {
#			limit = {faith = {has_doctrine = special_doctrine_is_christian_faith}}
#			is_female = yes
#		}
#		has_trait = calm
#		has_trait = gluttonous
#	}
#}
#scripted_trigger wokc_1001_prefers_spicy = {
#	OR = {
#		AND = {
#			faith = {has_doctrine = special_doctrine_is_christian_faith}
#			is_male = yes
#			can_be_warrior_trigger = {ARMY_OWNER = this}
#		}
#		has_trait = wrathful
#		has_trait = impatient
#		has_trait = gluttonous
#		ai_energy = 100
#	}
#}
#scripted_effect wokc_1001_success = {
#	#custom_tooltip = wokc_1001_success
#	send_interface_message = {
#		type = msg_arranged_courtship_good
#		title = msg_wok_courtship_1001_success_title
#		desc = msg_effect
#		left_icon = root
#		right_icon = scope:target
#		stress_impact = {
#			arrogant = -10
#			gluttonous = -20
#			lifestyle_reveler = -10
#		}
#		scope:scheme = {
#			add_scheme_modifier = {type = wok_courtship_1001_success_scheme_modifier}
#		}
#		scope:target = {
#			add_character_modifier = wok_courtship_1001_success_character_modifier
#		}
#	}
#}
#scripted_effect wokc_1001_mediocre = {
#	send_interface_message = {
#		type = msg_arranged_courtship_inconclusive
#		title = msg_wok_courtship_1001_mediocre_title
#		desc = msg_effect
#		left_icon = root
#		right_icon = scope:target
#		stress_impact = {
#			arrogant = 10
#		}
#	}
#	#custom_tooltip = wokc_1001_mediocre
#}
#scripted_effect wokc_1001_failure = {
#	send_interface_message = {
#		type = msg_arranged_courtship_bad
#		title = msg_wok_courtship_1001_failure_title
#		desc = msg_effect
#		left_icon = root
#		right_icon = scope:target
#		stress_impact = {
#			base = 10
#			arrogant = 30
#			humble = -10
#		}
#		#custom_tooltip = wokc_1001_failure
#		scope:scheme = {
#			add_scheme_modifier = {type = wok_courtship_1001_failure_scheme_modifier}
#		}
#		scope:target = {
#			add_character_modifier = wok_courtship_1001_failure_character_modifier
#		}
#	}
#}
#wok_courtship.1001 = {
#	title = wok_courtship.1001.t
#	trigger = {
#		is_ai = no # For now
#		NOT = {
#			scope:scheme = {
#				has_variable = had_wok_courtship_1001
#			}
#		}
#		is_available = yes
#		scope:target = {
#			is_ai = yes
#			is_available = yes
#		}
#	}
#	weight_multiplier = {
#		base = 1
#		modifier = {
#			add = {
#				value = stewardship
#				divide = 100
#			}
#		}
#		modifier = {
#			add = reveler_level
#		}
#		modifier = {
#			factor = 2
#			has_trait = legendary_fisherman
#		}
#		modifier = {
#			add = 1
#			has_trait = gluttonous
#		}
#		modifier = {
#			add = 1
#			has_trait = comfort_eater
#		}
#		modifier = {
#			add = 1
#			scope:target = {has_trait = gluttonous}
#		}
#		modifier = {
#			add = 1
#			scope:target = {has_trait = comfort_eater}
#		}
#	}
#	immediate = {
#		scope:scheme = {
#			set_variable = had_wok_courtship_1001
#		}
#		set_favorite_treat_effect = yes
#		scope:target = {
#			set_favorite_treat_effect = yes
#		}
#		# Setup the cannibal option
#		random_courtier_or_guest = {
#			limit = {
#				is_ai = yes
#				is_available = yes
#				NOR = {
#					this = scope:target
#					this = root.player_heir
#				}
#			}
#			weight = {
#				base = 75
#				modifier = {
#					add = root_opinion.*-1
#				}
#				modifier = {
#					is_lowborn = no
#					dynasty = root.dynasty
#					factor = 0.1
#				}
#				modifier = {
#					is_lowborn = no
#					house = root.house
#					factor = 0.1
#				}
#				modifier = {
#					is_lowborn = yes
#					factor = 10
#				}
#				modifier = {
#					has_relation_rival = root
#					factor = 50
#				}
#			}
#			save_scope_as = dish
#		}
#	}
#	desc = {
#		desc = wok_courtship.1001.desc
#		first_valid = {
#			triggered_desc = {trigger = {has_trait = arrogant} 		desc = wok_courtship.1001.desc_arrogant}
#			triggered_desc = {trigger = {has_trait = compassionate} desc = wok_courtship.1001.desc_compassionate}
#			triggered_desc = {trigger = {has_trait = humble} 		desc = wok_courtship.1001.desc_humble}
#			desc = wok_courtship.1001.desc_fallback
#		}
#		desc = wok_courtship.1001.desc_outro
#	}
#	theme = stewardship
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	override_icon = {
#		reference = "gfx/interface/icons/event_types/type_love.dds"
#	}
#	left_portrait = root
#	right_portrait = scope:target
#	lower_right_portrait = {
#		character = scope:dish
#		trigger = {
#			root = {
#				is_cannibal_trigger = yes
#			}
#		}
#	}
#	# What ingredients to use depend a bit on personality and social gender norms
#	option = {
#		ai_chance = {base = 1 modifier = {add = stewardship}}
#		name = wok_courtship.1001.spicy
#		duel = {
#			skill = stewardship
#			value = 0
#			10 = {
#				desc = wokc_1001_success show_chance = no
#				wokc_1001_default_success_modifier = yes
#				wokc_1001_success = yes
#			}
#			10 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#			10 = {
#				desc = wokc_1001_failure show_chance = no
#				wokc_1001_default_failure_modifier = yes
#				modifier = {
#					add = {value = 15 add = scope:target.attraction}
#					scope:target = {wokc_1001_prefers_sweet = yes}
#				}
#				wokc_1001_failure = yes
#			}
#		}
#	}
#	option = {
#		ai_chance = {base = 1 modifier = {add = stewardship}}
#		name = wok_courtship.1001.sweet
#		duel = {
#			skill = stewardship
#			value = 0
#			10 = {
#				desc = wokc_1001_success show_chance = no
#				wokc_1001_default_success_modifier = yes
#				wokc_1001_success = yes
#			}
#			10 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#			10 = {
#				desc = wokc_1001_failure show_chance = no
#				wokc_1001_default_failure_modifier = yes
#				modifier = {
#					add = scope:target.prowess
#					scope:target = {wokc_1001_prefers_spicy = yes}
#				}
#				wokc_1001_failure = yes
#			}
#		}
#	}
#	option = {
#		trait = diplomat
#		ai_chance = {
#			base = 1
#			modifier = {add = diplomacy}
#			modifier = {factor = 0 has_trait = shy}
#			modifier = {factor = 0 has_trait = arrogant}
#		}
#		name = wok_courtship.1001.ask
#		stress_impact = {
#			arrogant = 30
#			diplomat = -10
#			gregarious = -20
#			honest = -10
#			shy = 30
#			humble = -10
#		}
#		duel = {
#			skill = stewardship
#			value = 0
#			10 = {
#				desc = wokc_1001_success show_chance = no
#				modifier = {add = diplomacy}
#				wokc_1001_default_success_modifier = yes
#				wokc_1001_success = yes
#			}
#			50 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#			10 = {
#				desc = wokc_1001_failure show_chance = no
#				wokc_1001_default_failure_modifier = yes
#				wokc_1001_failure = yes
#			}
#		}
#	}
#	option = {
#		trigger = {
#			has_trait = arrogant
#		}
#		stress_impact = {
#			arrogant = -20
#			gluttonous = -20
#			stubborn = -20
#			humble = 20
#		}
#		name = wok_courtship.1001.self
#		flavor = wok_courtship.1001.self_flavor
#		duel = {
#			skill = stewardship
#			value = 0
#			10 = {
#				desc = wokc_1001_success show_chance = no
#				wokc_1001_default_success_modifier = yes
#				modifier = {factor = 0.5 scope:target = {has_trait = paranoid}}
#				modifier = {
#					factor = 5
#					var:favorite_treat = scope:target.var:favorite_treat
#				}
#				wokc_1001_success = yes
#			}
#			20 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#			10 = {
#				desc = wokc_1001_failure show_chance = no
#				wokc_1001_default_failure_modifier = yes
#				modifier = {
#					add = scope:target.prowess
#					scope:target = {wokc_1001_prefers_spicy = yes}
#				}
#				modifier = {
#					add = {value = 15 add = scope:target.attraction}
#					scope:target = {wokc_1001_prefers_sweet = yes}
#				}
#				modifier = {
#					factor = 0.1
#					var:favorite_treat = scope:target.var:favorite_treat
#				}
#				wokc_1001_failure = yes
#			}
#		}
#	}
#	option = {
#		trait = cannibal
#		trigger = {
#			is_ai = no
#			OR = {
#				is_cannibal_trigger = yes
#				faith = { has_doctrine_parameter = cannibalism_legal }
#			}
#		}
#		name = wok_courtship.1001.cannibal
#		flavor = wok_courtship.1001.cannibal_flavor
#		stress_impact = {
#			cannibal = -20
#			murderer = -15
#			callous = -10
#			sadistic = -20
#			deceitful = -10
#			honest = 20
#			gluttonous = -20
#			temperate = 10
#			compassionate = 20
#			just = 20
#		}
#		duel = {
#			skill = stewardship
#			value = 0
#			10 = {
#				desc = wokc_1001_success show_chance = no
#				wokc_1001_default_success_modifier = yes
#				modifier = {factor = 0.5 scope:target = {has_trait = paranoid}}
#				modifier = {factor = 2 scope:target = {is_cannibal_trigger = yes}}
#				wokc_1001_success = yes
#			}
#			20 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#			10 = {
#				desc = wokc_1001_failure show_chance = no
#				wokc_1001_default_failure_modifier = yes
#				modifier = {
#					add = scope:target.prowess
#					scope:target = {wokc_1001_prefers_spicy = yes}
#				}
#				modifier = {
#					add = {value = 15 add = scope:target.attraction}
#					scope:target = {wokc_1001_prefers_sweet = yes}
#				}
#				wokc_1001_failure = yes
#			}
#		}
#		unknown_murder_effect = {
#			VICTIM = scope:dish
#			MURDERER = root
#			REASON = death_mysterious
#		}
#		give_cannibal_secret_or_trait_effect = yes
#		add_internal_flag = dangerous
#	}
#	option = {
#		trait = legendary_fisherman
#		trigger = {
#			has_trait = legendary_fisherman
#		}
#		name = wok_courtship.1001.fish
#		flavor = wok_courtship.1001.fish_flavor
#		duel = {
#			skill = stewardship
#			value = 0
#			10000 = {
#				desc = wokc_1001_success show_chance = no
#				wokc_1001_default_success_modifier = yes
#				wokc_1001_success = yes
#			}
#			1 = {
#				desc = wokc_1001_mediocre show_chance = no
#				wokc_1001_mediocre = yes
#			}
#		}
#	}
#}
#
## Potential NYF response flavor events
## To consider once more events have been prototyped:
#
## wok_courtship.1002 = { # Success
## 	title = wok_courtship.1001.t
## 	immediate = {
## 		scope:target = {
## 			set_favorite_treat_effect = yes
## 		}
## 	}
## 	#desc = wok_courtship.1002.desc
## 	theme = stewardship
## 	widget = {
## 		gui = "event_window_widget_scheme"
## 		container = "custom_widgets_container"
## 	}
## 	override_icon = {
## 		reference = "gfx/interface/icons/event_types/type_love.dds"
## 	}
## 	left_portrait = root
## 	right_portrait = scope:target
## 	option = {
#
## 	}
## }
#
## wok_courtship.1003 = { # Meh
## 	title = wok_courtship.1001.t
## 	#desc = wok_courtship.1003.desc
## 	theme = stewardship
## 	widget = {
## 		gui = "event_window_widget_scheme"
## 		container = "custom_widgets_container"
## 	}
## 	override_icon = {
## 		reference = "gfx/interface/icons/event_types/type_love.dds"
## 	}
## 	left_portrait = root
## 	right_portrait = scope:target
## 	option = {
#
## 	}
## }
#
## wok_courtship.1004 = { # Major failure
## 	title = wok_courtship.1001.t
## 	desc = {
## 		desc = wok_courtship.1004.desc
## 		first_valid = {
## 			triggered_desc = {
## 				desc = wok_courtship.1001.reaction_blargh
## 				trigger = {
## 					scope:target = {
## 						OR = {
## 							this = character:BookLift
## 							has_trait = poet
## 						}
## 					}
## 				}
## 			}
## 			triggered_desc = {
## 				desc = wok_courtship.1001.reaction_diplomatic 
## 				trigger = {
## 					scope:target = {
## 						OR = {
## 							has_trait = diplomat
## 							has_trait = gregarious
## 							has_trait = compassionate
## 							has_trait = honest
## 							highest_skill = diplomacy
## 							opinion_of_root > 50
## 							ai_honor = 100
## 						}
## 					}
## 				}
## 			}
## 			triggered_desc = {
## 				desc = wok_courtship.1001.reaction_sadistic
## 				trigger = {
## 					scope:target = {
## 						OR = {
## 							has_trait = sadistic
## 							has_trait = torturer
## 							has_trait = callous
## 							highest_skill = intrigue
## 							opinion_of_root > -50
## 							ai_honor = -100
## 						}
## 					}
## 				}
## 			}
## 			triggered_desc = {
## 				desc = wok_courtship.1001.reaction_fickle
## 				trigger = {
## 					scope:target = {
## 						OR = {
## 							has_trait = fickle
## 							has_trait = arbitrary
## 							has_trait = just
## 							highest_skill = stewardship
## 							ai_energy = 100
## 						}
## 					}
## 				}
## 			}
## 		}
## 	}
## 	theme = stewardship
## 	widget = {
## 		gui = "event_window_widget_scheme"
## 		container = "custom_widgets_container"
## 	}
## 	override_icon = {
## 		reference = "gfx/interface/icons/event_types/type_love.dds"
## 	}
## 	left_portrait = root
## 	right_portrait = scope:target
## 	option = {
#
## 	}
## }
#
## POOP EVENT
#scripted_effect wokc_poop_success = {
#	scope:scheme = {
#		add_scheme_modifier = {
#			type = wok_courtship_poop_success_scheme_modifier
#		}
#	}
#}
#scripted_effect wokc_poop_truth = {
#	wokc_poop_success = yes
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = grateful_opinion
#		opinion = 10
#	}
#	stress_impact = {
#		deceitful = 20
#		honest = -20
#		brave = -10
#		humble = -10
#		arrogant = 30
#		gregarious = -10
#	}
#	add_prestige = {
#		value = prestige_level
#		add = highest_held_title_tier
#		add = scope:target.highest_held_title_tier
#		add = scope:target.prestige_level
#		multiply = -5
#	}
#	if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_sin = honest
#					trait_is_virtue = deceitful
#				}
#			}
#		}
#		add_piety = -50
#	}
#	else_if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_virtue = honest
#					trait_is_sin = deceitful
#				}
#			}
#		}
#		add_piety = 50
#	}
#	save_scope_as = answered
#	save_scope_as = truth
#	trigger_event = wok_courtship.2002
#}
#scripted_effect wokc_poop_extra_truth = {
#	wokc_poop_success = yes
#	save_scope_as = answered
#	save_scope_as = extra_truth
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = grateful_opinion
#		opinion = 30
#	}
#	if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_sin = honest
#					trait_is_virtue = deceitful
#				}
#			}
#		}
#		add_piety = -50
#	}
#	else_if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_virtue = honest
#					trait_is_sin = deceitful
#				}
#			}
#		}
#		add_piety = 50
#	}
#	trigger_event = wok_courtship.2002
#}
#scripted_effect wokc_poop_failure = {
#	scope:scheme = {
#		add_scheme_modifier = {
#			type = wok_courtship_poop_ignored_scheme_modifier
#		}
#	}
#}
#scripted_effect wokc_poop_lie = {
#	#wokc_poop_failure = yes
#	stress_impact = {
#		deceitful = -20
#		honest = 20
#		brave = 10
#		humble = 15
#		lazy = -10
#	}
#	if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_sin = honest
#					trait_is_virtue = deceitful
#				}
#			}
#		}
#		add_piety = 50
#	}
#	else_if = {
#		limit = {
#			faith = {
#				OR = {
#					trait_is_virtue = honest
#					trait_is_sin = deceitful
#				}
#			}
#		}
#		add_piety = -50
#	}
#	scope:target = {
#		stress_impact = {
#			trusting = -10
#			paranoid = 10
#		}
#		if = {
#			limit = {
#				has_trait = trusting
#			}
#			add_opinion = {
#				target = root
#				modifier = grateful_opinion
#				opinion = 15
#			}
#		}
#		
#		if = {
#			limit = {
#				has_trait = paranoid
#			}
#			add_opinion = {
#				target = root
#				modifier = disappointed_opinion
#				opinion = -15
#			}
#		}
#	}
#}
#scripted_effect wokc_poop_avoid = {
#	save_scope_as = avoid
#	stress_impact = {
#		humble = 10
#		arrogant = -10
#		diplomat = -10
#		gregarious = -10
#		shy = -10
#	}
#	trigger_event = wok_courtship.2001
#}
#scripted_effect wokc_poop_ignore = {
#	wokc_poop_failure = yes
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = disappointed_opinion
#		opinion = -10
#	}
#	add_prestige = diplomacy
#	stress_impact = {
#		shy = -10
#		gregarious = 20
#		diplomat = 20
#	}
#	save_scope_as = ignore
#}
#scripted_effect wokc_poop_abandon = {
#	stress_impact = {
#		arrogant = -20
#		humble = -20
#		calm = 20
#		forgiving = 20
#		vengeful = -20
#		wrathful = -20
#		irritable = -20
#	}
#	add_opinion = {
#		target = scope:target
#		modifier = disgusted_opinion
#		opinion = -30
#	}
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = disappointed_opinion
#		opinion = -15
#	}
#	scope:scheme = {
#		end_scheme = yes
#	}
#}
#scripted_effect wokc_poop_demonstration_success = {
#	scope:scheme = {
#		add_scheme_modifier = {
#			type = wok_courtship_poop_demonstration_positive_scheme_modifier
#		}
#	}
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = grateful_opinion
#		opinion = 30
#	}
#}
#scripted_effect wokc_poop_demonstration_failure = {
#	scope:scheme = {
#		add_scheme_modifier = {
#			type = wok_courtship_poop_demonstration_negative_scheme_modifier
#		}
#	}
#	reverse_add_opinion = {
#		target = scope:target
#		modifier = disgusted_opinion
#		opinion = -50
#	}
#}
#scripted_effect wokc_poop_demonstration = {
#	stress_impact = {
#		deviant = -20
#	}
#	random_list = {
#		100000 = {
#			desc = wok_courtship.poop.demonstration.success show_chance = no
#			trigger = {
#				scope:target = {
#					is_deviant_trigger = yes
#				}
#			}
#			wokc_poop_demonstration_success = yes
#			send_poop_demonstration_reaction_message = {OUTCOME = good}
#		}
#		100 = {
#			desc = wok_courtship.poop.demonstration.success show_chance = no
#			trigger = {
#				scope:target = {
#					is_deviant_trigger = no
#				}
#			}
#			modifier = {
#				add = attraction
#			}
#			modifier = {
#				add = scope:target.opinion_of_root
#			}
#			modifier = {
#				add = diplomacy
#			}
#			modifier = {
#				add = 1000
#				scope:target = character:BookShallanDavar
#			}
#			scope:target = {
#				give_deviant_secret_or_trait_effect = yes
#			}
#			wokc_poop_demonstration_success = yes
#			send_poop_demonstration_reaction_message = {OUTCOME = good}
#		}
#		100 = {
#			trigger = {
#				scope:target = {
#					NOR = {
#						has_trait = deviant
#						any_secret = {
#							secret_type = secret_deviant
#							is_known_by = root
#						}
#					}
#				}
#			}
#			modifier = {
#				add = scope:target.ai_zeal.div2.div2
#				scope:target = {
#					trait_is_shunned_in_faith_trigger = {
#						FAITH = scope:target.faith
#						TRAIT = deviant
#						GENDER_CHARACTER = scope:target
#					}
#				}
#			}
#			modifier = {
#				add = scope:target.ai_zeal.div2
#				scope:target = {
#					trait_is_criminal_in_faith_trigger = {
#						FAITH = scope:target.faith
#						TRAIT = deviant
#						GENDER_CHARACTER = scope:target
#					}
#				}
#			}
#			modifier = {
#				factor = 0.01
#				scope:target = {is_deviant_trigger = yes}
#			}
#			desc = wok_courtship.poop.demonstration.failure show_chance = no
#			wokc_poop_demonstration_failure = yes
#			send_poop_demonstration_reaction_message = {OUTCOME = bad}
#		}
#	}
#	trigger_event = wok_courtship.2005
#}
#scripted_effect send_poop_demonstration_reaction_message = {
#	hidden_effect = {
#		send_interface_message = {
#			type = msg_arranged_courtship_$OUTCOME$
#			title = wok_courtship.poop.demonstration.msg_title
#			desc = msg_effect
#			left_icon = root
#			right_icon = scope:target
#			#custom_tooltip = wok_courtship.poop.demonstration.msg_$OUTCOME$
#			switch = {
#				trigger = flag:$OUTCOME$
#				flag:good = {
#					show_as_tooltip = {wokc_poop_demonstration_success = yes}
#					scope:target = {
#						random_secret = {
#							limit = {
#								secret_type = secret_deviant
#							}
#							reveal_to = root
#						}
#					}
#				}
#				flag:bad = {
#					show_as_tooltip = {
#						wokc_poop_demonstration_failure = yes
#					}
#				}
#			}
#		}
#	}
#}
## How do you poop in armor?
#wok_courtship.2001 = {
#	title = wok_courtship.poop.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	trigger = {
#		# Only if you have pooped in your armor but your target has no clue how that would work
#		is_ai = no
#		has_variable = poop_events_counter
#		scope:target = {
#			is_ai = yes
#			is_knight = no
#			NOR = {
#				has_variable = poop_events_counter
#			}
#		}
#		OR = {
#			exists = scope:avoid # So that we can return to this event with different loc
#			NOT = {
#				scope:scheme = {
#					has_variable = had_wok_courtship_poop
#				}
#			}
#		}
#	}
#	weight_multiplier = {
#		base = 1
#		modifier = {
#			add = var:poop_events_counter
#		}
#		modifier = {add = {value = scope:target.ai_boldness divide = 100}}
#		modifier = {add = {value = scope:target.ai_sociability divide = 100}}
#		modifier = {factor = 10 scope:target = character:BookShallanDavar}
#		modifier = {factor = 2 has_trait = arrogant}
#		modifier = {factor = 2 scope:target = {is_deviant_trigger = yes}}
#		modifier = {factor = 2 scope:target = {has_trait = scholar}}
#		modifier = {factor = 2 scope:target = {has_trait = lunatic}}
#		modifier = {factor = 0.5 scope:target = {has_trait = arrogant}}
#		modifier = {factor = 0.2 scope:target = {has_trait = temperate}} # Prude trait
#		modifier = {factor = 0.2 scope:target = {has_trait = chaste}} # Prude trait
#		modifier = {factor = 0.1 scope:target = {has_trait = shy}}
#		modifier = {factor = 0.1 scope:target = {has_trait = reclusive}}
#		modifier = {
#			factor = 0.1
#			scope:target = {
#				can_be_knight_trigger = {
#					ARMY_OWNER = scope:target
#				}
#			}
#		}
#		modifier = {
#			factor = 0.1
#			scope:target = {
#				can_be_knight_trigger = {
#					ARMY_OWNER = root
#				}
#			}
#		}
#	}
#	immediate = {
#		scope:scheme = {
#			set_variable = had_wok_courtship_poop
#		}
#	}
#	desc = {
#		first_valid = {
#			triggered_desc = { # If we've already avoided the question once...
#				trigger = {
#					exists = scope:avoid
#				}
#				desc = {
#					first_valid = {
#						triggered_desc = {
#							trigger = {exists = scope:first_time}
#							desc = wok_courtship.poop.yay_for_originality
#						}
#						desc = wok_courtship.poop.avoided_rebuttal
#					}
#					# I could hear/read about your heroics...
#					first_valid = {
#						triggered_desc = {
#							trigger = {
#								scope:target = {is_singer = yes}
#							}
#							desc = wok_courtship.poop.justification_singer
#						}
#						triggered_desc = {
#							trigger = {
#								scope:target = {is_literate = yes}
#							}
#							desc = wok_courtship.poop.justification_literate
#						}
#						desc = wok_courtship.poop.justification_illiterate
#					}
#				}
#			}
#			desc = {
#				desc = wok_courtship.poop.intro
#				desc = wok_courtship.poop.prompt
#			}
#		}
#	}
#	theme = romance_scheme
#	left_portrait = {
#		character = root
#		triggered_animation = {
#			trigger = {
#				exists = scope:avoid
#			}
#			animation = shock
#		}
#		animation = flirtation
#	}
#	right_portrait = {
#		character = scope:target
#		animation = flirtation
#	}
#	option = { # Tell the truth, but speak around it.
#		trigger = {NOT = {has_trait = honest}}
#		name = wok_courtship.poop.truth
#		flavor = wok_courtship.poop.truth_flavor
#		wokc_poop_truth = yes
#	}
#	option = { # Be upfront about everything that happens on the battlefield.
#		trait = honest
#		trigger = {
#			has_trait = honest
#		}
#		name = wok_courtship.poop.expand_explanation
#		flavor = wok_courtship.poop.extra_truth_flavor
#		wokc_poop_extra_truth = yes
#	}
#	option = { # Big lie
#		trait = deceitful
#		trigger = {
#			has_trait = deceitful
#		}
#		name = wok_courtship.poop.big_lie
#		flavor = wok_courtship.poop.big_lie_flavor
#		wokc_poop_lie = yes
#	}
#	option = { # Lie
#		name = wok_courtship.poop.lie
#		flavor = wok_courtship.poop.lie_flavor
#		wokc_poop_lie = yes
#	}
#	option = { # Avoid the topic
#		trigger = {
#			has_global_variable = had_wok_courtship_poop
#			NOT = {exists = scope:avoid}
#		}
#		name = wok_courtship.poop.avoid
#		flavor = wok_courtship.poop.avoid_flavor
#		wokc_poop_avoid = yes
#	}
#	option = { # Avoid the topic, but praise originality.
#		trigger = {
#			NOT = {has_global_variable = had_wok_courtship_poop}
#			NOT = {exists = scope:avoid}
#		}
#		name = wok_courtship.poop.first_time
#		flavor = wok_courtship.poop.first_time_flavor
#		save_scope_value_as = {name = first_time value = yes}
#		wokc_poop_avoid = yes
#	}
#	option = { # Ignore the topic completely
#		name = wok_courtship.poop.ignore
#		flavor = wok_courtship.poop.ignore_flavor
#		wokc_poop_ignore = yes
#	}
#	option = { # Demonstrate.
#		trigger = {
#			is_deviant_trigger = yes
#		}
#		trait = deviant
#		name = wok_courtship.poop.demonstrate
#		flavor = wok_courtship.poop.demonstrate_flavor
#		wokc_poop_demonstration = yes
#	}
#	option = {
#		trigger = {
#			exists = scope:avoid
#		}
#		name = wok_courtship.poop.abandon_scheme
#		wokc_poop_abandon = yes
#	}
#	after = {
#		set_global_variable = had_wok_courtship_poop
#	}
#}
## Telling the truth.
#wok_courtship.2002 = {
#	title = wok_courtship.poop.t
#	# widget = {
#	# 	gui = "event_window_widget_scheme"
#	# 	container = "custom_widgets_container"
#	# }
#	theme = romance_scheme
#	left_portrait = {
#		character = root
#		animation = flirtation
#	}
#	right_portrait = {
#		character = scope:target
#		animation = flirtation
#	}
#	desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {exists = scope:extra_truth}
#				desc = wok_courtship.poop.truth.desc_intro_extra
#			}
#			desc = wok_courtship.poop.truth.desc_intro
#		}
#		desc = wok_courtship.poop.admission
#		desc = wok_courtship.poop.truth.desc
#		first_valid = {
#			triggered_desc = {
#				trigger = {scope:target.opinion_of_root < 0}
#				desc = wok_courtship.poop.truth.desc_uninterested
#			}
#			desc = wok_courtship.poop.truth.desc_interested
#		}
#		desc = wok_courtship.poop.truth.desc_outro
#	}
#	option = {
#		name = wok_courtship.poop.truth.laugh
#		flavor = wok_courtship.poop.truth.laugh_flavor
#		stress_impact = {
#			humble = -20
#			arrogant = 20
#			wrathful = 20
#			vengeful = 20
#			forgiving = -20
#			craven = -10
#			poet = -10
#			cynical = -10
#		}
#		switch = {
#			trigger = has_trait
#			vengeful = {remove_trait = vengeful}
#			wrathful = {remove_trait = wrathful}
#			arrogant = {remove_trait = arrogant}
#			calm = {add_trait = humble}
#			humble = {add_trait = calm}
#		}
#		add_opinion = {
#			target = scope:target
#			modifier = wok_courtship_joke_opinion
#			opinion = 15
#		}
#	}
#	option = {
#		name = wok_courtship.poop.truth.deadpan
#		flavor = wok_courtship.poop.truth.deadpan_flavor
#		stress_impact = {
#			calm = -10
#			patient = -10
#			callous = -10
#			cynical = -10
#		}
#		add_opinion = {
#			target = scope:target
#			modifier = wok_courtship_joke_opinion
#			opinion = -69
#		}
#	}
#	option = {
#		name = wok_courtship.poop.truth.mockery
#		flavor = wok_courtship.poop.truth.mockery_flavor
#		stress_impact = {
#			brave = 10
#			forgiving = 30
#			humble = 30
#			calm = 20
#			wrathful = -30
#			arrogant = -20
#			vengeful = -20
#			irritable = -20
#			zealous = -10
#		}
#		add_dread = {
#			value = 5
#			if = {limit = {has_trait = forgiving} subtract = 5}
#			if = {limit = {has_trait = wrathful} add = 5}
#			if = {limit = {has_trait = vengeful} add = 5}
#			if = {limit = {has_trait = arrogant} add = 5}
#		}
#		switch = {
#			trigger = has_trait
#			forgiving = {remove_trait = forgiving}
#			humble = {remove_trait = humble}
#			calm = {remove_trait = calm}
#			vengeful = {add_trait = arrogant}
#			arrogant = {add_trait = vengeful}
#			wrathful = {add_trait = vengeful}
#		}
#		add_opinion = {
#			target = scope:target
#			modifier = insulted_opinion
#			opinion = -30
#		}
#		reverse_add_opinion = {
#			target = scope:target
#			modifier = disappointed_opinion
#			opinion = -15
#		}
#		end_court_scheme_effect = {OUTCOME = failure_soft}
#		if = {
#			limit = {
#				is_bondsmith = yes
#			}
#			delay_ideal = {MONTHS = 1}
#		}
#	}
#	option = {
#		name = wok_courtship.poop.truth.brando
#		flavor = wok_courtship.poop.truth.brando_flavor
#		trait = hoid
#		trait = cynical
#		trigger = {
#			OR = {
#				has_trait = hoid
#				has_trait = cynical
#			}
#		}
#		add_opinion = {
#			target = character:BrandoSando
#			modifier = disappointed_opinion
#			opinion = -100
#		}
#	}
#	# option = {
#	# 	trigger = {NOT = {exists = scope:answered}}
#	# 	name = wok_courtship.poop.truth
#	# 	wokc_poop_truth = yes
#	# }
#	# option = {
#	# 	trigger = {NOT = {exists = scope:answered}}
#	# 	name = wok_courtship.poop.lie
#	# 	wokc_poop_lie = yes
#	# }
#	# option = {
#	# 	name = wok_courtship.poop.ignore
#	# 	wokc_poop_ignore = yes
#	# }
#	# option = {
#	# 	trait = deviant
#	# 	trigger = {is_deviant_trigger = yes}
#	# 	name = wok_courtship.poop.demonstrate
#	# 	wokc_poop_demonstration = yes
#	# }
#	# option = { # Reset to first event
#	# 	trigger = {
#	# 		NYF = yes
#	# 	}
#	# 	trigger_event = wok_courtship.2001
#	# }
#}
#
## NYI outcomes:
## Ignored the question
#wok_courtship.2003 = {
#	title = wok_courtship.poop.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	immediate = {}
#	desc = {
#		desc = wok_courtship.poop.attempt_resume
#		desc = wok_courtship.poop.admitted_but_ignored_rebuttal
#	}
#	theme = romance_scheme
#	left_portrait = root
#	right_portrait = scope:target
#	option = {
#
#	}
#}
## Lied
#wok_courtship.2004 = {
#	title = wok_courtship.poop.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	immediate = {}
#	desc = {}
#	theme = romance_scheme
#	left_portrait = root
#	right_portrait = scope:target
#	option = {}
#}
#
## NYF outcomes
## Demonstrated
#wok_courtship.2005 = {
#	title = wok_courtship.poop.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	immediate = {
#		show_as_tooltip = {
#			scope:scheme = {
#				if = {
#					limit = {scope:target = {is_deviant_trigger = yes}}
#					add_scheme_modifier = {type = wok_courtship_poop_demonstration_positive_scheme_modifier}
#				}
#				else = {
#					add_scheme_modifier = {type = wok_courtship_poop_demonstration_negative_scheme_modifier}
#				}
#			}
#		}
#		random_secret = {
#			limit = {
#				secret_type = secret_deviant
#			}
#			reveal_to = scope:target
#		}
#		scope:target = {
#			random_secret = {
#				limit = {
#					secret_type = secret_deviant
#				}
#				reveal_to = root
#			}
#		}
#	}
#	desc = {
#		desc = wok_courtship.poop.demonstration.intro
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					scope:target = {is_deviant_trigger = yes}
#				}
#				desc = wok_courtship.poop.demonstration.deviant
#			}
#			desc = wok_courtship.poop.demonstration.normal
#		}
#	}
#	theme = romance_scheme
#	left_portrait = root
#	right_portrait = scope:target
#	option = {
#		name = wok_courtship.poop.demonstration.a
#	}
#	option = { # Reset to first event
#		trigger = {
#			NYF = yes
#		}
#		trigger_event = wok_courtship.2001
#	}
#}
#wok_courtship.9001 = {
#	title = wok_courtship.9001.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	trigger = {}
#	immediate = {}
#	desc = {}
#	theme = romance_scheme
#	right_portrait = scope:target
#	option = {}
#}
#
## Secret sharing - based off similar Seduce event?
#scripted_effect wokc_3001_select_effect = {
#	random_secret = {
#		limit = {
#			NOT = {is_known_by = scope:target}
#			save_temporary_scope_as = tmp_secret
#			scope:target = {
#				any_secret = {
#					same_secret_type_as = scope:tmp_secret
#				}
#			}
#		}
#		alternative_limit = {
#			NOT = {is_known_by = scope:target}
#		}
#		save_scope_as = secret
#	}
#	scope:target = {
#		random_secret = {
#			limit = {
#				NOT = {is_known_by = root}
#				same_secret_type_as = scope:secret
#			}
#			alternative_limit = {
#				NOT = {is_known_by = root}
#			}
#			save_scope_as = target_secret
#		}
#	}
#}
#scripted_effect wokc_3001_reveal_effect = {
#	stress_impact = {
#		shy = 20
#		gregarious = -5
#		honest = -15
#		deceitful = 20
#		trusting = -20
#		paranoid = 50
#	}
#	scope:secret = {
#		reveal_to_without_events_effect = {CHARACTER = scope:target}
#	}
#}
#scripted_effect wokc_3001_reveal_effect2 = {
#	stress_impact = {
#		shy = 20
#		gregarious = -5
#		honest = -15
#		deceitful = 20
#		trusting = -20
#		paranoid = 50
#	}
#	random_secret = {
#		limit = {
#			NOT = {
#				is_known_by = scope:target
#				this = scope:secret
#			}
#		}
#		reveal_to_without_events_effect = {CHARACTER = scope:target}
#	}
#}
#scripted_effect wokc_3001_learn_effect = {
#	custom_tooltip = wokc_3001_learn_effect
#	hidden_effect = {
#		send_interface_message = {
#			type = msg_arranged_courtship_good
#			title = msg_arranged_courtship_secret_title
#			desc = msg_effect
#			scope:target = {
#				random_secret = {
#					limit = {
#						NOT = {is_known_by = root}
#						same_secret_type_as = scope:secret
#					}
#					alternative_limit = {
#						NOT = {is_known_by = root}
#					}
#					save_scope_as = return_secret
#					if = {
#						limit = {
#							NOT = {
#								exists = scope:betrayal
#							}
#						}
#						if = {
#							limit = {
#								same_secret_type_as = scope:secret
#							}
#							scope:scheme = {
#								add_scheme_modifier = {type = wok_courtship_3001_shared_secrets_same_type}
#							}
#						}
#						else = {
#							scope:scheme = {add_scheme_modifier = {type = wok_courtship_3001_shared_secrets_same_type}}
#						}
#					}
#					reveal_to_without_events_effect = {CHARACTER = root}
#				}
#				if = {
#					limit = {
#						NOT = {
#							exists = scope:return_secret
#						}
#					}
#					random_known_secret = {
#						limit = {
#							NOR = {secret_owner = root is_known_by = root}
#							same_secret_type_as = scope:secret
#						}
#						alternative_limit = {
#							NOR = {secret_owner = root is_known_by = root}
#						}
#						save_scope_as = return_secret
#						reveal_to_without_events_effect = {CHARACTER = root}
#					}
#				}
#				if = {
#					limit = {
#						NOT = {
#							exists = scope:return_secret
#						}
#					}
#					custom_tooltip = msg_arranged_courtship_secret_none
#				}
#			}
#		}
#	}
#}
#wok_courtship.3001 = {
#	title = wok_courtship.3001.t
#	widget = {
#		gui = "event_window_widget_scheme"
#		container = "custom_widgets_container"
#	}
#	trigger = {
#		is_ai = no
#		scope:target = {
#			is_ai = yes
#		}
#		any_secret = {
#			NOT = {
#				is_known_by = scope:target
#			}
#		}
#		trigger_if = { # If you're paranoid you can assert that they're hiding something even if they don't.
#			limit = {
#				NOT = {
#					has_trait = paranoid
#				}
#			}
#			scope:target = {
#				any_secret = {
#					NOT = {
#						is_known_by = root
#					}
#				}
#			}
#		}
#	}
#	weight_multiplier = {
#		base = 0
#		modifier = {
#			add = {
#				every_secret = {
#					add = 1
#				}
#			}
#		}
#		modifier = {
#			add = {
#				scope:target = {
#					every_secret = {
#						add = 1
#					}
#				}
#			}
#		}
#		modifier = {
#			add = radiant_level
#			is_lightweaver = yes
#		}
#		modifier = {
#			add = scope:target.radiant_level
#			scope:target = {is_lightweaver = yes}
#		}
#		modifier = {
#			factor = 2
#			has_trait = trusting
#		}
#		modifier = {
#			factor = 2
#			scope:target = {has_trait = trusting}
#		}
#		modifier = {
#			factor = 0.1
#			has_trait = paranoid
#		}
#		modifier = {
#			factor = 0.1
#			scope:target = {has_trait = paranoid}
#		}
#	}
#	immediate = {
#		wokc_3001_select_effect = yes
#	}
#	desc = {
#		first_valid = {
#			triggered_desc = {
#				trigger = {
#					has_trait = paranoid
#				}
#				desc = wok_courtship.3001.intro_dominant_me
#			}
#			# Levelheaded
#			triggered_desc = {
#				trigger = {
#					scope:target = {
#						has_personality_levelheaded_trigger = yes
#					}
#				}
#				desc = wok_courtship.3001.intro_levelheaded
#			}
#			triggered_desc = {
#				trigger = {
#					scope:target = {
#						has_personality_levelheaded_trigger = yes
#					}
#				}
#				desc = wok_courtship.3001.intro_levelheaded_me
#			}
#			# Emotional
#			triggered_desc = {
#				trigger = {
#					scope:target = {
#						has_personality_emotional_trigger = yes
#					}
#				}
#				desc = wok_courtship.3001.intro_emotional
#			}
#			triggered_desc = {
#				trigger = {
#					has_personality_emotional_trigger = yes
#				}
#				desc = wok_courtship.3001.intro_emotional_me
#			}
#			# Dominant
#			triggered_desc = {
#				trigger = {
#					OR = {
#						has_personality_submissive_trigger = yes
#						scope:target = {
#							OR = {
#								has_personality_dominant_trigger = yes
#								has_personality_malicious_trigger = yes
#							}
#						}
#					}
#				}
#				desc = wok_courtship.3001.intro_dominant
#			}
#			triggered_desc = {
#				trigger = {
#					OR = {
#						has_personality_dominant_trigger = yes
#						has_personality_malicious_trigger = yes
#						scope:target = {
#							has_personality_submissive_trigger = yes
#						}
#					}
#				}
#				desc = wok_courtship.3001.intro_dominant_me
#			}
#			desc = wok_courtship.3001.intro_levelheaded_me
#		}
#		# NEEDS MORE FILLER
#		desc = wok_courtship.3001.desc
#	}
#	theme = romance_scheme
#	right_portrait = scope:target
#	option = {
#		name = wok_courtship.3001.accept1
#		name = {trigger = {scope:secret = {secret_type = secret_cannibal}} 		text = wok_courtship_secret.cannibal}
#		name = {trigger = {scope:secret = {secret_type = secret_murder}} 		text = wok_courtship_secret.murderer}
#		name = {trigger = {scope:secret = {secret_type = secret_non_believer}} 	text = wok_courtship_secret.non_believer}
#		name = {trigger = {scope:secret = {secret_type = secret_incest}} 		text = wok_courtship_secret.incestuous}
#		name = {trigger = {scope:secret = {secret_type = secret_deviant}} 		text = wok_courtship_secret.deviant}
#		name = {trigger = {scope:secret = {secret_type = secret_reader}} 		text = wok_courtship_secret.reader}
#		name = {trigger = {scope:secret = {secret_type = secret_lover}} 		text = wok_courtship_secret.lover}
#		name = {trigger = {scope:secret = {secret_type = secret_witch}} 		text = wok_courtship_secret.witch}
#		name = {trigger = {scope:secret = {secret_type = secret_homosexual}} 	text = wok_courtship_secret.homosexual}
#		
#		wokc_3001_reveal_effect = yes
#		wokc_3001_learn_effect = yes
#	}
#	option = {
#		trigger = {
#			any_secret = {
#				NOT = {
#					is_known_by = scope:target
#					this = scope:secret
#				}
#			}
#		}
#		name = wok_courtship.3001.accept2
#		wokc_3001_reveal_effect2 = yes
#		wokc_3001_learn_effect = yes
#	}
#	option = {
#		name = wok_courtship.3001.refuse
#		flavor = wok_courtship.3001.refuse_flavor
#		reverse_add_opinion = {
#			target = scope:target
#			modifier = disappointed_opinion
#			opinion = -25
#		}
#	}
#	option = {
#		name = wok_courtship.3001.lie
#		trait = deceitful
#		trigger = {
#			has_trait = deceitful
#		}
#		save_scope_as = betrayal
#		if = {
#			limit = {is_truthwatcher = yes}
#			delay_ideal = {MONTHS = 5}
#		}
#		duel = {
#			skill = intrigue
#			target = scope:target
#			50 = {
#				modifier = {
#					add = scope:duel_value.*-1
#				}
#				modifier = {
#					factor = 2
#					scope:target = {
#						has_trait = paranoid
#					}
#				}
#				reverse_add_opinion = {
#					target = scope:target
#					modifier = betrayed_our_promise
#				}
#				wokc_3001_learn_effect = yes
#				end_court_scheme_effect = {OUTCOME = failure_hard}
#			}
#			50 = {
#				modifier = {
#					add = scope:duel_value
#				}
#				modifier = {
#					factor = 2
#					scope:target = {
#						has_trait = trusting
#					}
#				}
#				wokc_3001_learn_effect = yes
#			}
#		}
#	}
#}