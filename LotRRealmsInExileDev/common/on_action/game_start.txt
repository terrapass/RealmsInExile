# Called from code after history generation
# Empty scope
on_game_start = {
	events = {
		fp1_scandinavian_adventurers.0004	# FP1 - Organise Norse adventurers.
		fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.
		fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.
		historical_artifacts.0023			# Historical Artifacts Generator
		lotr_historical_artifacts.0001		# LotR Historical Artifacts Generator
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing		
	}

	effect = {	
		fire_intro_events = yes
		generate_sorcery_list_on_start = yes
		
		random_independent_ruler = {
			trigger_event = elven_racial.0100
		}
		
		every_living_character = {
        	trigger_event = {
				id = coa.1					# LotR - Change CoAs for realms controlled by Uruks.
				days = 1
			}
			trigger_event = {
				id = elven_racial.0001 	#Elven racial maintenance event
				days = 1
			}
		}

		#########################
		# WILDERNESS total clear of courtiers, guests and downgrading the leader
		# Issue and solution: guests seems to constantly respawn unless you remove the leader, so we do it
		#########################
		empty_wastelands_inhabitants_effect = yes

		#########################
		# WILDERNESS The ruler will be respawned, we need to remove all traits from him/her
		# Issue and solution: ruler is still not a ruler and you can't use every_ruler, it seems to be appointed after, so I use a filtered every_living_character
		#########################
		remove_traits_wastelands_effect = yes	


		#Setup Global Variables
		set_global_variable = {
			name = tedjin_reactionaries_triggered
			value = no
		}
		set_global_variable = {
			name = tedjin_civil_war_over
			value = no
		}
		set_global_variable = {
			name = tedjin_civil_war_result
			value = 0 #Not yet occurred
		}
		
		
		
		title:c_minas_tirith.holder = { 
        	trigger_event = { ### LotR Shattered Earth Game Rule Initial Event ###
				id = shattered_earth.1
				days = 1
			}
			trigger_event = { # Initial culture acceptance
				id = culture_acceptance.1
			}
        }

		### Cap Dynasty Perks at 5 ###
		
		every_living_character = {
        	limit = {
				has_dynasty = yes
				dynasty = {
					dynasty_prestige > 6250
				}
			}
			dynasty = {
				add_dynasty_prestige = {
					value = dynasty_prestige
					multiply = -1
					add = 6250
				}
			}
		}

		### Gondor Border Realm Wars ###
		character:linevingintur6 = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
				}
				trigger_event = {
					id = warband.2001
					days = { 15 30 }
				}
			}
		}
		
		#character:lineisilmonir10 = {
		#	if = {
		#		limit = {
		#			is_alive = yes
		#			is_landed = yes
		#		}
		#		trigger_event = {
		#			id = warband.2010
		#			days = { 15 30 }
		#		}
		#	}
		#}
		
		character:lineofcalmacil14 = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
				}
				trigger_event = {
					id = warband.2020
					days = { 15 30 }
				}
			}
		}
		
		title:k_umbar.holder = {
			if = {
				limit = {
					is_alive = yes
					is_landed = yes
	
					title:d_nan_i_feryn.holder = {
						is_independent_ruler = yes
					}
				}
				trigger_event = {
					id = umbar.0001
					days = { 15 30 }
				}
			}
		}
	}
}


# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	on_actions = {
        delay = { months = 1 }
        lotr_on_monthly_tribute
    }	
	
	effect = {
        every_suzerain = {
            # Initialise tributary income for UI
            trigger_event = { id = tributary.0006 }
        }
	
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes #todo fix
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}

		every_character_with_royal_court = {
			set_current_court_grandeur = court_grandeur_minimum_expected
			apply_hold_court_grace_effect = yes
			# Stops Hold Court reminders at game start
			set_variable = {
				name = last_hold_court_date
				value = current_year
			}
		}
		
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		
		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}
		
		#every_living_character = {
		#	trigger_event = elven_racial.0001 	#Elven racial maintenance event
		#}
	}

	events = {
		game_rule.1000	#Autopopulate families
	}
}
