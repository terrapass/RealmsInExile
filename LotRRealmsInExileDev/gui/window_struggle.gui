######################################################
##################### STRUGGLE #######################
######################################################
window = {
	name = "struggle_window"
	datacontext = "[StruggleWindow.GetStruggle]"
	datacontext = "[GetVariableSystem]"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	allow_outside = yes

	using = Window_Background
	size = { 687 100% }

	state = {
		name = _show
		on_start = "[PdxGuiTriggerAllAnimations('struggle_appear')]"
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		position = { 42 0 }
		on_start = "[GetVariableSystem.Clear( 'showing_ending_decisions' )]"
	}

	state = {
		name = _hide
		on_finish = "[PdxGuiTriggerAllAnimations('struggle_hide')]"
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		position = { 75 0 }
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { -10 26 }

		widget = {
			size = { 100% 100% }

			background = {
				name = "decorative_background"
				margin_left = -40
				margin_bottom = -410

				texture = "[Struggle.GetCurrentPhase.GetBackgroundTexture]"
				using = Mask_Rough_Edges
				fittype = centercrop
				alpha = 0.9

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
					blend_mode = alphamultiply
				}

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical_up_dark.dds"
					blend_mode = normal
					mirror = vertical
					alpha = 0.6
				}
			}

			vbox = {
				margin_left = 38
				margin_right = 35
				margin_top = 18
				margin_bottom = 20

				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				vbox = { # participants
					name = "struggle_participants"
					layoutpolicy_horizontal = expanding
					spacing = 6
					margin_right = 10
					margin_bottom = 60

					header_pattern = {
						layoutpolicy_horizontal = expanding

						blockoverride "header_text"
						{
							text = "[StruggleWindow.GetStruggle.GetNameNoTooltip]"
						}

						blockoverride "button_close"
						{
							onclick = "[StruggleWindow.Close]"
							clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_view_close"
						}
					}

					text_single = {
						text = "[Struggle.GetPlayerInvolvementDesc]"
						max_width = 650
					}

					button_standard = {
						name = "struggle_involvement_button_tutorial_uses_this"
						size = { 230 32 }
						minimumsize = { 200 0 }
						onclick = "[ToggleGameViewData('struggle_involvement', Struggle.GetID)]"
						text = "STRUGGLE_INVOLVEMENT_BUTTON"
					}

					#expand = {}
				}

				button = { # Current Phase area
					name = "current_phase_area"
					size = { 330 330 }

					state = {
						name = struggle_appear
						delay = 0.1
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.8
					}

					state = {
						name = struggle_hide
						using = Animation_Curve_Default
						alpha = 0
					}

					icon = {
						visible = "[StruggleWindow.HasPossibleEndingDecision]"
						texture = "gfx/interface/component_masks/mask_glow.dds"
						size = { 460 420 }
						position = { 0 -56 }
						parentanchor = center
						alpha = 0
						color = { 0.917 0.8 0.505 1 }

						modify_texture = {
							name = "glow_1"
							texture = "gfx/interface/component_masks/mask_glow.dds"
							alpha = 0
							blend_mode = alphamultiply
						}

						state = {
							name = active_ending_decision
							trigger_when = "[StruggleWindow.HasPossibleEndingDecision]"
							next = active_ending_decision_rotate1
							using = Animation_FadeIn_Standard
							bezier = { 0.5 0 0.5 1 }
							alpha = 0.9

							modify_texture = {
								name = "glow_1"
								rotate_uv = 0
								alpha = 0.6
							}
						}

						state = {
							name = active_ending_decision_rotate1
							next = active_ending_decision_rotate2
							using = Animation_Curve_Default
							alpha = 0.6
							duration = 13

							modify_texture = {
								name = "glow_1"
								rotate_uv = 360
								alpha = 0.9
							}
						}

						state = {
							name = active_ending_decision_rotate2
							next = active_ending_decision_rotate1
							using = Animation_Curve_Default
							alpha = 0.9
							duration = 13

							modify_texture = {
								name = "glow_1"
								rotate_uv = -1
								alpha = 0.6
							}
						}

						state = {
							name = inactive_ending_decision
							using = Animation_FadeIn_Standard
							bezier = { 0.5 0 0.5 1 }
							alpha = 0

							modify_texture = {
								name = "glow_1"
								alpha = 0
							}
						}
					}

					button = {
						name = "current_phase_widget"
						datacontext = [StruggleWindow.GetStruggle.GetCurrentPhase]
						datacontext = [GetPlayer]
						parentanchor = center
						position = { 0 -28 }
						size = { 330 330 }
						distribute_visual_state = no
						allow_outside = yes

						state = {
							name = active_ending_decision
							trigger_when = "[StruggleWindow.HasPossibleEndingDecision]"
							using = Animation_FadeIn_Standard
							bezier = { 0.5 0 0.5 1 }
						}

						state = {
							name = inactive_ending_decision
							using = Animation_FadeIn_Standard
							bezier = { 0.5 0 0.5 1 }
						}

						background = {
							visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
							texture = "gfx/interface/icons/struggle_banners/current_phase_banner_01.dds"
						}

						background = {
							visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
							texture = "gfx/interface/icons/struggle_banners/current_phase_banner_02.dds"
						}

						background = {
							visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
							texture = "gfx/interface/icons/struggle_banners/current_phase_banner_03.dds"
						}

						vbox = {
							widget = {
								name = "top_frame"

								icon = {
									name = "tile_frame_top"
									position = { -10 -6 }
									size = { 348 20 }
									texture = "gfx/interface/skinned/component_decoration/decoration_frame_top.dds"
									spriteType = Corneredtiled
									spriteborder = { 100 0 }
									texture_density = 2
								}

								icon = {
									name = "tile_frame_top_center_part"
									parentanchor = top|hcenter
									position = { 0 -20 }
									texture = "gfx/interface/skinned/component_decoration/decoration_frame_top_center.dds"
									texture_density = 2
								}
							}

							hbox = {
								name = "current_phase_header"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								maximumsize = { 250 114 }

								datacontext = "[GetPlayer]"
								tooltipwidget = struggle_tooltip_light

								container = {
									name = "icon"

									#	tooltipwidget = {
									#		using = struggle_phase_tooltip
									#	}
									# want a tooltip for current phase struggle

									icon = {
										size = { 74 74 }
										visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
										texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
									}

									icon = {
										size = { 74 74 }
										visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
										texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
									}

									icon = {
										size = { 72 72 }
										visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
										texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
									}

									icon = {
										parentanchor = center
										size = { 54 54 }
										position = { 0 -2 }
										texture = "[StrugglePhase.GetIcon]"
									}

									widget ={
										position = { 64 14 }
										visible = "[Struggle.IsInTransitionPhase]"

										icon = {
											visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
											parentanchor = center
											size = { 40 40 }
											texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
										}

										icon = {
											parentanchor = center
											size = { 35 35 }
											texture = "gfx/interface/icons/icon_time.dds"
										}
									}
								}

								vbox = {
									name = "text"
									margin_right = 16
									margin_bottom = 8

									text_single = {
										layoutpolicy_horizontal = expanding
										text = "CURRENT_PHASE"
										max_width = 170
										using = Font_Size_Medium
										margin_bottom = -6
									}

									text_single = {
										margin_top = 8 #LotR
										layoutpolicy_horizontal = expanding
										text = "[StruggleWindow.GetStruggle.GetCurrentPhase.GetNameNoTooltip]"
										max_width = 170
										using = Font_Size_Big
										default_format = "#high"
									}
								}
							}

							vbox = {
								name = "current_phase_effects"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								maximumsize = { 200 98 }

								text_label_center = {
									text = "PHASE_EFFECTS_HEADER"
									default_format = "#high"
								}

								hbox = {
									name = "phase icons"
									layoutpolicy_vertical = expanding
									spacing = 6

									container = {
										name = "war_effect"
										tooltipwidget = phase_effect_tooltip_war

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
										}

										icon = {
											parentanchor = center
											position = { 0 -2 }
											size = { 36 36 }
											texture = "gfx/interface/icons/struggle_effects/war.dds"
										}
									}

									container = {
										name = "culture_effect"
										tooltipwidget = phase_effect_tooltip_culture

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
										}

										icon = {
											parentanchor = center
											position = { 0 -2 }
											size = { 36 36 }
											texture = "gfx/interface/icons/struggle_effects/culture.dds"
										}
									}

									container = {
										name = "faith_effect"
										tooltipwidget = phase_effect_tooltip_faith

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
										}

										icon = {
											parentanchor = center
											position = { 0 -2 }
											size = { 36 36 }
											texture = "gfx/interface/icons/struggle_effects/faith.dds"
										}
									}

									container = {
										name = "other_effect"
										tooltipwidget = phase_effect_tooltip_other

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInterloperCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_01.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Struggle.IsInvolvedCharacter(GetPlayer)]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_02.dds"
										}

										icon = {
											size = { 52 52 }
											visible = "[Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
											texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
										}

										icon = {
											parentanchor = center
											position = { 0 -2 }
											size = { 36 36 }
											texture = "gfx/interface/icons/struggle_effects/other.dds"
										}
									}
								}
							}

							vbox = {
								name = "ending_decision_button_tutorial_uses_this"
								ending_decision_button = {
									visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)2')]"

									blockoverride onclick {
										onclick = "[VariableSystem.Toggle('showing_ending_decisions')]"
									}
								}

								ending_decision_button = {
									visible = "[LessThanOrEqualTo_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)1')]"

									blockoverride onclick {
										onclick = "[StruggleWindow.OnSingleDecisionClick]"
									}
								}
							}

							expand = {}
						}

						widget = { # next phase info
							name = "next_phase_info"
							visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"

							parentanchor = bottom|hcenter
							widgetanchor = center
							size = { 500 80 }

							state = {
								name = _show
								using = Animation_FadeIn_Quick
							}

							state = {
								name = _hide
								using = Animation_FadeOut_Quick
							}

							state = {
								name = struggle_appear
								delay = 0.3
								using = Animation_Curve_Default
								alpha = 1
								duration = 0.5
							}

							state = {
								name = struggle_hide
								using = Animation_Curve_Default
								alpha = 0
							}

							icon = {
								texture = "gfx/interface/window_struggle/phase_decoration.dds"
								size = { 103% 104% }
								position = { 0 -6 }
								parentanchor = center
								using = Color_Grey
								alpha = 0.6
							}

							vbox = { # Phase progressing
								visible = "[Not( Struggle.IsInTransitionPhase )]"
								margin_top = 10
								spacing = 5

								text_single = {
									text = STRUGGLE_NEXT_PHASE_PROGRESS_LABEL
									max_width = 650
									using = Font_Size_Medium
									autoresize = yes
								}
								text_single = {
									text = STRUGGLE_NEXT_PHASE_PROGRESS_DESC
									max_width = 500
									default_format = "#low;italic"
									using = Font_Size_Small
								}
								expand = {}
							}

							vbox = { # In phase transition
								visible = "[Struggle.IsInTransitionPhase]"

								margin_top = 10
								spacing = 5

								text_single = {
									text = STRUGGLE_NEXT_PHASE_TRANSITION_LABEL
									max_width = 650
									using = Font_Size_Medium
								}
								text_single = {
									text = STRUGGLE_NEXT_PHASE_TRANSITION_DESC
									max_width = 500
									default_format = "#low;italic"
									using = Font_Size_Small
								}
								expand = {}
							}

							background = {
								using = Background_Area_ExtraDark
							}
						}
					}
				}

				vbox = {
					name = "next_phase_area_tutorial_uses_this"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					widget = { # Phases
						visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
						layoutpolicy_horizontal = expanding
						size = { 200 186 }
						scissor = yes

						state = {
							name = struggle_appear
							delay = 0.1
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.8
						}

						state = {
							name = struggle_hide
							using = Animation_Curve_Default
							alpha = 0
						}

						vbox = {
							name = "next_phase_area"

							flowcontainer = {
								name = "next_phase_widgets"
								datamodel = "[StruggleWindow.GetNextPhases]"

								item = {
									next_phase_banner = {}
								}
							}
						}
					}

					vbox = { # catalyst info
						name = "catalyst_information_area"
						datacontext = "[StruggleWindow.GetSelectedPhase]"
						visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							using = Background_Area_Dark
							alpha = 0.5
						}

						state = {
							name = "catalyst_refresh"
							using = Animation_Refresh_FadeOut
						}

						state = {
							using = Animation_Refresh_FadeIn
						}

						state = {
							name = struggle_appear
							delay = 0.5
							using = Animation_Curve_Default
							alpha = 1
							duration = 0.4
						}

						state = {
							name = struggle_hide
							using = Animation_Curve_Default
							alpha = 0
						}

						spacer = {
							size = { 0 20 }
						}

						text_label_center = {
							text = "PHASE_CATALYST_DESCRIPTION_HEADER"
							max_width = 560
							fontsize = 18
						}

						text_single = {
							text = "PHASE_CATALYST_DESCRIPTION_HEADER_INFO"
							max_width = 560
						}

						spacer = {
							size = { 0 15 }
						}

						scrollbox = {
							size = { -1 194 }
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							blockoverride "scrollbox_background" {}
							blockoverride "scrollbox_background_fade" {}
							blockoverride "scrollbox_margins" {}

							blockoverride "scrollbox_content"
							{
								vbox = {
									name = "catalyst_entries"
									datamodel = "[StruggleWindow.GetCatalystsForSelectedPhase]"

									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding

									margin_left = 10
									margin_right = 15

									spacing = 3

									item = {
										hbox = {
											layoutpolicy_vertical = expanding
											layoutpolicy_horizontal = expanding

											text_multi = {
												layoutpolicy_horizontal = expanding
												text = "PHASE_CATALYST_DESCRIPTION_ENTRY"
												align = left|nobaseline
												max_width = 520
												
												margin = { 10 5 }
											}

											background = {
												using = Background_Area_Dark
											}

											widget = {
												size = { 50 44 }

												background = {
													visible = "[GreaterThan_int32( Struggle.GetNumCompletionsOfCatalystForPhase( StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst ), '(int32)0' )]"
													using = Background_Frame
													color = { 0.4 0.603 0.298 1 }
													alpha = 0.6
												}

												background = {
													visible = "[GreaterThan_int32( Struggle.GetNumCompletionsOfCatalystForPhase( StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst ), '(int32)0' )]"
													using = Background_Area
													color = { 0.4 0.603 0.298 1 }
													alpha = 0.1
												}

												background = {
													visible = "[EqualTo_int32( Struggle.GetNumCompletionsOfCatalystForPhase( StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst ), '(int32)0' )]"
													using = Background_Frame
													using = Color_Grey
													alpha = 0.4
												}

												background = {
													visible = "[EqualTo_int32( Struggle.GetNumCompletionsOfCatalystForPhase( StruggleWindow.GetSelectedPhase, CatalystEntry.GetCatalyst ), '(int32)0' )]"
													using = Background_Area
													using = Color_Grey
													alpha = 0.1
												}

												text_single = {
													parentanchor = center
													align = nobaseline
													text = "PHASE_CATALYST_COMPLETIONS"
												}
											}
										}
									}
								}
							}
						}
					}
				}

				vbox = { # Ending Decisions
					name = "ending_decision_area_tutorial_uses_this"
					visible = "[VariableSystem.Exists('showing_ending_decisions')]"
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					#size = { 614 466 }

					using = Animation_Tab_Switch

					state = {
						name = struggle_appear
						delay = 0.1
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.8
					}

					state = {
						name = struggle_hide
						using = Animation_Curve_Default
						alpha = 0
					}

					vbox = {
						name = "next_phase_area"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_top = 15
						margin_bottom = 35

						background = {
							using = Background_Area
						}

						background = {
							using = Background_Area

							margin_bottom = -435

							modify_texture = {
								texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
								blend_mode = alphamultiply
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_right = 20

							expand = {}

							button_close = {
								onclick = "[VariableSystem.Toggle('showing_ending_decisions')]"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_right = 10
							margin_top = 15
							margin_bottom = 20

							text_label_center = {
								datacontext = "[Struggle.GetCurrentPhase]"
								layoutpolicy_horizontal = expanding
								text = "ENDING_DECISION_AREA_HEADER"
								align = center
								autoresize = yes
								using = Font_Size_Medium
								max_width = 580
							}

							text_single = {
								text = "ENDING_DECISION_AREA_DESCRIPTION"
								multiline = yes
								align = center
								autoresize = yes
								max_width = 580
							}
						}

						fixedgridbox = {
							name = "ending_decisions"
							datamodel = "[StruggleWindow.GetEndingDecisions]"
							addcolumn = 190
							addrow = 300
							maxhorizontalslots = 3
							flipdirection = yes

							item = {
								button_standard_clean = {
									visible = "[Decision.IsShownForPlayer]"
									size = { 180 300 }
									onclick = "[StruggleWindow.OnEndingDecisionClick(Decision.Self)]"
									tooltip = "SHOW_DECISION_TOOLTIP"

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										background = {
											name = "decision_background"
											texture = "[Decision.GetExtraPicture]"
											using = Mask_Rough_Edges
											fittype = centercrop
											alpha = "[Select_float(Decision.IsPossibleForPlayer, '(float)1', '(float)0.2')]"

											margin = { -1 -1 }

											modify_texture = {
												texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
												blend_mode = alphamultiply
												translate_uv = { 0 -0.1 }
											}
										}

										hbox = {
											visible = "[Not(Decision.IsPossibleForPlayer)]"
											layoutpolicy_horizontal = expanding

											margin = { 0 5 }

											warning_icon = {
												size = { 30 30 }
												name = "not_possible"
											}

											background = {
												using = Background_Area_Dark
											}
										}

										expand = {}

										hbox = {
											layoutpolicy_horizontal = growing

											background =  {
												using = Background_Area_Dark

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
													blend_mode = alphamultiply
													mirror = vertical
												}
											}

											background = {
												texture ="gfx/interface/component_masks/patterns/mask_pattern_02.dds"
												spriteType = Corneredtiled
												color = { 0.6 0.7 0.65 0.2 }
												alpha = 0.7

												modify_texture = {
													texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
													blend_mode = alphamultiply
												}
											}

											text_single = {
												visible = "[Decision.IsPossibleForPlayer]"
												max_width = 170
												margin = { 0 15 }

												text = "[Decision.GetTitleForPlayer]"
												default_format = "#clickable"
												align = center
											}

											text_single = {
												visible = "[Not(Decision.IsPossibleForPlayer)]"
												max_width = 170
												margin = { 0 15 }

												text = "[Decision.GetTitleForPlayer]"
												default_format = "#low"
												align = center
											}
										}
									}
								}
							}
						}

						expand = {}
					}	
				}
			}
		}
	}

	struggle_mini_map_mode = {}
}

types Struggle
{
	type next_phase_banner = container {
		button = {
			size = { 148 160 }
			position = { 0 26 }

			datacontext = "[GetPlayer]"

			onclick = "[StruggleWindow.SetSelectedPhase(StrugglePhase.Self)]"
			onclick = "[PdxGuiTriggerAllAnimations('catalyst_refresh')]"

			enabled = "[Or( Not( Struggle.IsInTransitionPhase ), ObjectsEqual( StrugglePhase.Self, Struggle.GetNextPhase ) )]"

			tooltipwidget = {
				using = struggle_phase_tooltip
			}

			widget = {
				visible = "[Not( VariableSystem.Exists('showing_ending_decisions') )]"
				size = { 46 36 }
				position = { 0 -28 }
				parentanchor = hcenter|top

				background = {
					using = Background_Area_ExtraDark
				}
			}

			background = {
				visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
				size = { 148 166 }
				parentanchor = center
				using = Background_Area_Dark
				alpha = 0.6

				modify_texture = {
					texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
					blend_mode = alphamultiply
					alpha = 1
				}
			}

			background = {
				texture = "gfx/interface/icons/struggle_banners/next_phase_banner.dds"

				modify_texture = {
					visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
					texture = "gfx/interface/colors/white.dds"
					alpha = 0.4
					blend_mode = overlay
				}
			}

			widget = {
				size = { 120 65 }
				parentanchor = center

				text_single = {
					parentanchor = center
					position = { 0 -56 }
					text = "[StrugglePhase.GetNameNoTooltip]"
					default_format = "#high"
				}

				container = {
					name = "phase_icon"
					parentanchor = center

					icon = {
						size = { 65 65 }
						position = { 0 -14 } #LotR
						texture = "gfx/interface/icons/struggle_banners/icon_background_dark.dds"
					}

					icon = {
						parentanchor = center
						position = { -2 -8 } #LotR
						size = { 45 45 }
						texture = "[StrugglePhase.GetIcon]"
					}
				}

				container = {
					name = "progress_bar"
					parentanchor = center
					position = { 0 30 }

					progressbar_standard = {
						visible = "[ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self)]"
						parentanchor = center
						size = { 80 12 }
						value = "[CurrentAndMaxToProgressbarValueInt32(Struggle.GetPhaseProgressValue(StrugglePhase.Self), GetDefine('NStruggle', 'PHASE_TRANSITION_THRESHOLD'))]"
						progresstexture = "gfx/interface/progressbars/progress_orange.dds"

						icon = {
							name = "arrow"
							visible = "[ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self)]"
							parentanchor = center
							texture = "gfx/interface/window_struggle/arrow.dds"
							size = { 30 18 }
							position = { 0 -118 }
							allow_outside = yes
						}
					}

					progressbar_standard = {
						visible = "[Not(ObjectsEqual(Struggle.GetCurrentLeadingPhase, StrugglePhase.Self))]"
						parentanchor = center
						size = { 80 12 }
						value = "[CurrentAndMaxToProgressbarValueInt32(Struggle.GetPhaseProgressValue(StrugglePhase.Self), GetDefine('NStruggle', 'PHASE_TRANSITION_THRESHOLD'))]"
						progresstexture = "gfx/interface/progressbars/progress_grandeur_increase.dds"
					}

					text_single = {
						margin_top = 15 #LotR
						parentanchor = center
						position = { 0 10 }
						text = "PHASE_PROGRESS_VALUE"
						default_format = "#high"
					}
				}

				icon = {
					name = "funnel_right"
					visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
					parentanchor = center
					texture = "gfx/interface/window_struggle/funnel_divider.dds"
					size = { 322 100 }
					position = { 225 33 }
					using = Color_Blue
					alpha = 0.4

				}

				icon = {
					name = "funnel_left"
					visible = "[ObjectsEqual(StruggleWindow.GetSelectedPhase, StrugglePhase.Self)]"
					parentanchor = center
					mirror = horizontal
					texture = "gfx/interface/window_struggle/funnel_divider.dds"
					size = { 322 100 }
					position = { -225 33 }
					using = Color_Grey
					alpha = 0.4
				}
			}
		}
	}

	type ending_decision_button = button {
		name = "end_struggle_button"
		size = { 252 98 }
		enabled = "[GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)0')]"
		tooltip = "[StruggleWindow.GetEndingButtonTooltip]"

		block onclick {}
		clicksound = "event:/DLC/FP2/SFX/UI/fp2_struggle_ending_decision_view"

		highlight_icon = {
			visible = "[StruggleWindow.HasPossibleEndingDecision]"
			size = { 100% 100% }
			texture = "gfx/interface/window_struggle/ending_button_background.dds"
		}

		highlight_icon = {
			visible = "[GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)0')]"
			size = { 100% 100% }
			texture = "gfx/interface/window_struggle/ending_button_frame.dds"
		}

		text_single = {
			parentanchor = center
			position = { 0 -24 }
			text = "[SelectLocalization(GreaterThan_int32(GetDataModelSize(StruggleWindow.GetEndingDecisions), '(int32)1'), 'ENDING_DECISION_BUTTON_LABEL_MULTIPLE', 'ENDING_DECISION_BUTTON_LABEL_SINGLE')]"
			max_width = 230
			using = Font_Size_Medium
			default_format = "#clickable"
			alwaystransparent = yes
		}

		text_single = {
			visible = "[And( StruggleWindow.HasPossibleEndingDecision, Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) )]"
			parentanchor = center
			position = { 0 -4 }
			max_width = 180
			text = "ENDING_DECISION_AVAILABLE"
			default_format = "#clickable"
			alwaystransparent = yes
		}

		text_single = {
			visible = "[Or( Not( StruggleWindow.HasPossibleEndingDecision ), Not( Struggle.IsCharacterInvolvedOrInterloper( GetPlayer ) ) )]"
			parentanchor = center
			position = { 0 -4 }
			max_width = 180
			text = "ENDING_DECISION_UNAVAILABLE"
			default_format = "#clickable"
			alwaystransparent = yes
		}
	}


	type struggle_mini_map_mode = mini_map_mode {
		parentanchor = bottom|left
		widgetanchor = bottom|right
		position = { -350 -25 }
	}
}
