types ArtifactCrafting { # Types are essentially templates. They are typically done in the gui/shared folder but can be done in any file.
    type window_crafting_mechanic = window { # This tells it that the type window_crafting_mechanic is a window. It can't be type window_crafting_mechanic = window = { so it looks a little offf
        size = { 900 850 } # I shouldn't have to explain this
        position = { 400 75 } # This is in the main hud window so this is the top left corner of the window from the top left corner of the whole game
        layer = middle # I include this out of habit but it doesn't matter here
        visible = "[GetVariableSystem.Exists('window_crafting_mechanic')]" # This is shown if that variable system exists, regardless of the variable.
        
        using = Window_Background # Using is useful for preset backgrounds and the like. All windows should at least have this and the decoration block
        using = Window_Decoration
        using = Animation_ShowHide_Standard

        button_standard = {
            onclick = "[GetScriptedGui('clear_crafting_artifact_var').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
            raw_text = "Unselect Artifact"
            size = { 125 35 }
            parentanchor = left
            position = { 45 25 }
        }
        
        vbox = { # Vertical box. Everything in it is arranged vertically. hbox is the horizontal version
            using = Window_Margins
            restrictparent_min = yes # Unsure what it is but you need it in a vbox that is directly in a window.
    
            header_pattern = { # Also a type. Just copy paste this typically and change the text and onclick.
                layoutpolicy_horizontal = expanding # Expands size horizontally
    
                blockoverride "header_text" # Blockovverides are occasionally necessary with types.
                {
                    text = "CRAFTING_TITLE_HUD"
                    default_format = "#high"
                }

                blockoverride "button_close"
                {
                    onclick = "[GetVariableSystem.Clear( 'window_crafting_mechanic' )]"                    
                    onclick = "[GetScriptedGui('clear_crafting_artifact_var').Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
                }
            }
            
            hbox = {
                vbox = {
                    size = { 700 750 }
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding

                    scrollbox = { # A literal area where you can scroll.
                        name = "artifact_crafting_scrollarea" # Completely unecessary but useful if you need to run a search for this area.
                        layoutpolicy_vertical = expanding 
                        size = { 500 750 }
                        
                        blockoverride "scrollbox_content" # It's a type, and it needs this
                        {
                            # position = { -183 0 }
                            hbox = {
                                datacontext = "[GetPlayer]" # This box is calling a text_icon, which needs a datacontext
                                icon = { # A default picture
                                    texture = "gfx/interface/icons/artifact/artifact_icons_unique_dramborleg.dds" # Gets an image. Can also be in background or button blocks
                                    visible = "[Not( GetPlayer.MakeScope.Var('artifact_craft').IsSet )]"
                                    size = { 100 100 }
                                } 

                                widget_material_slot = { # Weapon 
                                    visible = "[And(GetPlayer.MakeScope.Var('artifact_craft').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('artifact_craft').GetFlagName, 'weapon_artifact'))]"
                                    blockoverride "size" {
                                        size = { 100 100 }
                                    }
                                    icon = {
                                        texture = "gfx/interface/icons/artifact/artefact_icons_unique_anduril.dds" # Gets an image based on the spell name
                                        size = { 100 100 }
                                        # parentanchor = center
                                    } 
                                }   

                                widget_material_slot = { # Armour 
                                    visible = "[And(GetPlayer.MakeScope.Var('artifact_craft').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('artifact_craft').GetFlagName, 'armor_artifact'))]"
                                    blockoverride "size" {
                                        size = { 100 100 }
                                    }
                                    icon = {
                                        texture = "gfx/interface/icons/artifact/artifact_icons_unique_elven_cape.dds" # Gets an image based on the spell name
                                        size = { 100 100 }
                                        parentanchor = center
                                    } 
                                }

                                widget_material_slot = { # Regalia 
                                    visible = "[And(GetPlayer.MakeScope.Var('artifact_craft').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('artifact_craft').GetFlagName, 'regalia_artifact'))]"
                                    blockoverride "size" {
                                        size = { 100 100 }
                                    }
                                    icon = {
                                        texture = "gfx/interface/icons/artifact/artifact_icons_unique_staff_gandalf_the_white.dds" # Gets an image based on the spell name
                                        size = { 100 100 }
                                        parentanchor = center
                                    } 
                                }

                                widget_material_slot = { # Helmet 
                                    visible = "[And(GetPlayer.MakeScope.Var('artifact_craft').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('artifact_craft').GetFlagName, 'helmet_artifact'))]"
                                    blockoverride "size" {
                                        size = { 100 100 }
                                    }
                                    icon = {
                                        texture = "gfx/interface/icons/artifact/artefact_icons_unique_crown_of_gondor.dds" # Gets an image based on the spell name
                                        size = { 100 100 }
                                        parentanchor = center
                                    } 
                                }

                                widget_material_slot = { # Trinket 
                                    visible = "[And(GetPlayer.MakeScope.Var('artifact_craft').IsSet, EqualTo_string(GetPlayer.MakeScope.Var('artifact_craft').GetFlagName, 'trinket_artifact'))]"
                                    blockoverride "size" {
                                        size = { 100 100 }
                                    }
                                    icon = {
                                        texture = "gfx/interface/icons/artifact/artefact_icons_unique_ring_of_barahir.dds" # Gets an image based on the spell name
                                        size = { 100 100 }
                                        parentanchor = center
                                    } 
                                }
                            }

                            spacer = { size = { 0 20 } }
                            
                            text_single = { # One line of text
                                # visible = "[GetPlayer.MakeScope.Var('artifact_craft').IsSet]"
                                text = "CRAFTING_INSTRUCTIONS_TITLE" # This one is a little advanced, but it merges the flag value of the variable on you, which let's say is flag:lorem_ipsum and the word _name, and then gets the loc key for the merged lorem_ipsum_name
                                fontsize = 36 # I assume you know this
                                align = center # Read the above
                                minimumsize = { 275 -1 } # No matter how large it is it takes up at least 275 in space horizontally. -1 for the vertical means that the minimumsize doesn't come into affect there.
                                default_format = "#high" # Gets textformatting. You can only have one thing in here, so "#high #bold" won't work.
                                visible = "[Not( GetPlayer.MakeScope.Var('artifact_craft').IsSet )]"
                            }

                            text_single = {
                                # visible = "[GetPlayer.MakeScope.Var('artifact_craft').IsSet]" # Not(), And(), Or(), Nor(), and Nand() can all be used in GUI. Seperate items are seperated by commas
                                text = "CRAFTING_INSTRUCTIONS_DESC"
                                align = center
                                multiline = yes
                                fontsize = 18
                                margin = { 0 15 } # A margin of twenty on the right and left and 4 on the top and bottom.
                                maximumsize = { 425 100 }
                                # autoresize = yes 
                                default_format = "#high"
                                visible = "[Not( GetPlayer.MakeScope.Var('artifact_craft').IsSet )]"
                            }

                            text_multi = { # A paragraph of text
                                minimumsize = { 500 -1 }
                                maximumsize = { 200 -1 } # It automatically adds more lines to keep it from exceeding this.
                                autoresize = yes # Read above, they work together
                                margin = { 20 4 } # A margin of twenty on the right and left and 4 on the top and bottom.
                                fontsize = 18
                                default_format = "#Bold"
                                text = "BASIC_DESC"
                                align = center
                                visible = "[Not( GetPlayer.MakeScope.Var('artifact_craft').IsSet )]"
                            } 
                            ### DROPDOWN LIST FOR ARTIFACT TYPES ###
                            # artifact_type_list = { }

                            vbox = {
                                button_primary = {
                                    raw_text = "Weapon Artifact"
                                    onclick = "[GetScriptedGui('select_Weapon_artifact_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                    # enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                    tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                    size = { 250 35 }
                                }
                                spacer = { size = { 0 10 } }
                                button_primary = {
                                    raw_text = "Armour Artifact"
                                    onclick = "[GetScriptedGui('select_Armor_artifact_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                    # enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                    tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                    size = { 250 35 }
                                }
                                spacer = { size = { 0 10 } }
                                button_primary = {
                                    raw_text = "Regalia Artifact"
                                    onclick = "[GetScriptedGui('select_Regalia_artifact_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                    # enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                    tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                    size = { 250 35 }
                                }
                                spacer = { size = { 0 10 } }
                                button_primary = {
                                    raw_text = "Helmet Artifact"
                                    onclick = "[GetScriptedGui('select_Helmet_artifact_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                    # enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                    tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                    size = { 250 35 }
                                }
                                spacer = { size = { 0 10 } }
                                button_primary = {
                                    raw_text = "Trinket Artifact"
                                    onclick = "[GetScriptedGui('select_Trinket_artifact_type').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                    # enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                    tooltip = "as" # You can get text versions of sgui, even in normal text.
                                    size = { 250 35 }
                                }               
                            }
                        }
                    }
                    
                    expand = {} # This block takes up empty space so that the other stuff isn't stretched to fit it. Generally I recommend adding it to large vboxes and hboxes
                }
                
                vbox = {
                    layoutpolicy_vertical = expanding
                    # visible = "[GetPlayer.MakeScope.Var('artifact_craft').IsSet]" # using this to test whether var gets set

                    hbox = { # Metal Icons
                        datacontext = "[GetPlayer]" # This box is calling a text_icon, which needs a datacontext

                        widget_material_slot = { # mithril
                            icon = {
                                texture = "gfx/interface/icons/artifact/artifact_icons_unique_vilya.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "[mithril|E]"
                        }

                        widget_material_slot = { # gold
                            icon = {
                                texture = "gfx/interface/icons/artifact/artefact_icons_unique_crown_of_gondor.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Gold"
                        }

                        widget_material_slot = { # silver
                            icon = {
                                texture = "gfx/interface/icons/artifact/artefact_icons_unique_horn_of_gondor.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Silver"
                        }

                        widget_material_slot = { # steel
                            icon = {
                                texture = "gfx/interface/icons/artifact/artifact_icons_unique_dramborleg.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Steel"
                        }

                        widget_material_slot = { # iron
                            icon = {
                                texture = "gfx/interface/icons/artifact/artifact_icons_unique_witch_king_helm.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Iron"
                        }

                        widget_material_slot = { # bronze
                            icon = {
                                texture = "gfx/interface/icons/artifact/nimrodel_gem.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Bronze"
                        }

                        widget_material_slot = { # copper
                            icon = {
                                texture = "gfx/interface/icons/artifact/dragon_helm_alan_lee.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Copper"
                        }

                        widget_material_slot = { # tin
                            icon = {
                                texture = "gfx/interface/icons/artifact/artifact_laurelin_chalice.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Tin"
                        }

                        widget_material_slot = { # lead
                            icon = {
                                texture = "gfx/interface/icons/artifact/artifact_icons_unique_arkenstone.dds" # Gets an image based on the spell name
                                size = { 42 42 }
                                parentanchor = center
                            }
                            tooltip = "Lead"
                        }
                    }

                    hbox = { # Count of Materials available
                        datacontext = "[GetPlayer]" # This box is calling a text_icon, which needs a datacontext

                        widget_material_slot = { # Count of mithril available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available [mithril|E]"
                        }

                        widget_material_slot = { # Count of gold available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available gold"
                        }

                        widget_material_slot = { # Count of silver available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available silver"
                        }

                        widget_material_slot = { # Count of steel available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available steel"
                        }

                        widget_material_slot = { # Count of iron available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available iron"
                        }
                        
                        widget_material_slot = { # Count of bronze available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available bronze"
                        }

                        widget_material_slot = { # Count of copper available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available copper"
                        }

                        widget_material_slot = { # Count of tin available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available tin"
                        }

                        widget_material_slot = { # Count of lead available
                            text_single = {
                                text = "[GetScriptedGui('display_material_count').BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
                                fontsize = 20
                                parentanchor = center
                                default_format = "#high"
                            }
                            tooltip = "Available lead"
                        }
                    }

                    spacer = { size = { 0 3 } } # To create a tiny gap 
                    ## ↓↓↓ REPLACE WITH A LIST OF THE MODIFIERS (WIP) ↓↓↓ ## 
                    scrollbox = { # A literal area where you can scroll.
                        name = "artifact_crafting_scrollarea" # Completely unecessary but useful if you need to run a search for this area.
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        size = { 400 750 }
                        # visible = "[GetPlayer.MakeScope.Var('artifact_craft').IsSet]"
                        background = {
                            texture = "gfx/interface/illustrations/lifestyles_background/learning_lifestyle.dds"
                            alpha = 0.2
                            modify_texture = {
                                name = "mask"
                                texture = "gfx/interface/component_masks/mask_rough_edges.dds"
                                spriteType = Corneredstretched
                                spriteborder = { 0 0 }
                                #margin = { -10 -10 } #Not valid in this context
                                blend_mode = alphamultiply
                            }
                        }
                        blockoverride "scrollbox_content" # It's a type, and it needs this
                        {
                            dynamicgridbox = { # Oh boy, how to explain this.
                                layoutpolicy_vertical = expanding
                                allow_outside = yes
                                ignoreinvisible = yes
                                maxhorizontalslots = 1
                                maxverticalslots = 100
                                block "datamodel" {
                                    datamodel = "[GetGlobalList('global_spells_list')]" # The dynamicgridbox gets every item on the list and generates an entry for it
                                }
                                item = { # This is the template for the entries
                                    widget = { # You need a widget, you can't just have multiple vboxes and hboxes in it without a crash. Just one vbox in the item instead of a widget will work though
                                        block "size" {
                                            size = { 380 100 }
                                        }
                                        vbox = {
                                            hbox = {
                                                text_single = {
                                                    text = "[Localize(Concatenate(Concatenate('@icon_small_',Scope.GetFlagName), '!'))]"
                                                    size = { 81 81 }
                                                }
                                                vbox = {
                                                    text_single = {
                                                        text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
                                                        fontsize = 20
                                                        align = center
                                                        minimumsize = { 275 -1 }
                                                        default_format = "#high"
                                                    }
                                                    spacer = {
                                                        size = { 0 10 }
                                                    }
                                                    button_primary = {
                                                        text = "SELECT_SPELL"
                                                        onclick = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # This is a bit more advanced than a normal GetScriptedGui('gui_name'), instead again concatenating the flag of this entry with the select_
                                                        enabled = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # Enabled checks to see if a trigger is met. If it is, you can use the button. Otherwise, it's greyed out
                                                        tooltip = "[GetScriptedGui(Concatenate('select_',Scope.GetFlagName)).IsValidTooltip(GuiScope.SetRoot(GetPlayer.MakeScope).End)]" # You can get text versions of sgui, even in normal text.
                                                    }
                                                }
                                                expand = {}
                                            }
                                            expand = {}
                                        }
                                    }
                                }
                            }
                        }
                    }

                    expand = {}
                }
                expand = {}
            }
            expand = {}
        }
    }

    type widget_material_slot = widget {
        block "size" 
        {
			size = { 50 50 }
		}
		widget = {
			using = Window_Background_Subwindow
			size = { 100% 100% }
		}
	}

    type artifact_type_list = container {
        using = debug_square
        dropdown_menu_standard = {
            position = { 0 0 }
            blockoverride "dropdown_properties"
            {
                datamodel = "[GetGlobalList('global_artifact_types_list')]"
                onselectionchanged = "[GetScriptedGui(Concatenate('select_',Concatenate(Scope.GetFlagName,'_type'))).Execute(GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
            }

            blockoverride "dropdown_size"
            {
                size = { 300 32 }
            }

            blockoverride "dropdown_list_maxsize"
            {
                maximumsize = { 291 760 }
            }

            blockoverride "dropdown_active_item_properties"
            {
                text = "[Localize(Scope.GetFlagName)]"
                align = center
            }

            blockoverride "dropdown_item_properties"
            {
                text = "[Localize(Scope.GetFlagName)]"
                align = center
            }

            blockoverride "dropdown_list_properties"
            {
                #onmousehierarchyleave = "[PortraitCustomizationWindow.RestorePreviousPortraitModifierIndex]"
            }
        }
    }
}